{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/tiled_scrolling_demo/TiledScrollingDemo.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingComponent.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/rendering/WebGLGameTiledLayerRenderer.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/Viewport.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/scene/sprite/Behavior.ts","src/wolfie2d/scene/sprite/BugBehavior1.ts","src/wolfie2d/scene/sprite/BugBehavior2.ts","src/wolfie2d/scene/tiles/TileSet.ts","src/wolfie2d/scene/tiles/TiledLayer.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\n * TiledScrollingDemo.ts - demonstrates how tiled layers can be rendered\r\n * and scrolled using a viewport. \r\n */\r\nimport {Game} from '../wolfie2d/Game'\r\nimport {AnimatedSprite} from '../wolfie2d/scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../wolfie2d/scene/sprite/AnimatedSpriteType'\r\nimport {TiledLayer} from '../wolfie2d/scene/tiles/TiledLayer'\r\nimport {SceneGraph} from '../wolfie2d/scene/SceneGraph'\r\nimport {Viewport} from '../wolfie2d/scene/Viewport'\r\nimport {TextToRender, TextRenderer} from '../wolfie2d/rendering/TextRenderer'\r\n\r\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\r\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\r\nlet game = new Game(\"game_canvas\", \"text_canvas\");\r\n\r\n// WE THEN LOAD OUR GAME SCENE, WHICH WILL FIRST LOAD\r\n// ALL GAME RESOURCES, THEN CREATE ALL SHADERS FOR\r\n// RENDERING, AND THEN PLACE ALL GAME OBJECTS IN THE SCENE.\r\n// ONCE IT IS COMPLETED WE CAN START THE GAME\r\nconst DESERT_SCENE_PATH = \"resources/scenes/ScrollableDesert.json\";\r\ngame.getResourceManager().loadScene(DESERT_SCENE_PATH, \r\n                                    game.getSceneGraph(),\r\n                                    game.getRenderingSystem(), \r\n                                    function() {\r\n    // ADD ANY CUSTOM STUFF WE NEED HERE, LIKE TEXT RENDERING\r\n    // LET'S ADD A BUNCH OF RANDOM SPRITES\r\n    let world : TiledLayer[] = game.getSceneGraph().getTiledLayers();\r\n    let worldWidth : number = world[0].getColumns() * world[0].getTileSet().getTileWidth();\r\n    let worldHeight : number = world[0].getRows() * world[0].getTileSet().getTileHeight();\r\n\r\n    //Add player character mantis\r\n    let type : AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"MANTIS\");\r\n    let player : AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\r\n    player.setPlayer();\r\n    player.getPosition().set(880, 480, 0, 1);\r\n    game.getSceneGraph().addAnimatedSprite(player);\r\n\r\n    // Add 50 ants\r\n    for (let i = 0; i < 50; i++) {\r\n        let type : AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"ANT\");\r\n        let randomSprite : AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\r\n        let randomX : number = Math.random() * worldWidth;\r\n        let randomY : number = Math.random() * worldHeight;\r\n        randomSprite.getPosition().set(randomX, randomY, 0, 1);\r\n        randomSprite.addBehavior(1, game.getSceneGraph(), worldWidth - 100, worldHeight - 100);\r\n        game.getSceneGraph().addAnimatedSprite(randomSprite);\r\n    }\r\n    // Add 50 bed bugs\r\n    for (let i = 0; i < 50; i++) {\r\n        let type : AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"BED_BUG\");\r\n        let randomSprite : AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\r\n        let randomX : number = Math.random() * (worldWidth - 50);\r\n        let randomY : number = Math.random() * (worldHeight - 50);\r\n        randomSprite.getPosition().set(randomX, randomY, 0, 1);\r\n        randomSprite.addBehavior2(2, game.getSceneGraph(), worldWidth - 100, worldHeight - 100, player);\r\n        game.getSceneGraph().addAnimatedSprite(randomSprite);\r\n    }\r\n\r\n    // NOW ADD TEXT RENDERING. WE ARE GOING TO RENDER 3 THINGS:\r\n        // NUMBER OF SPRITES IN THE SCENE\r\n        // LOCATION IN GAME WORLD OF VIEWPORT\r\n        // NUMBER OF SPRITES IN VISIBLE SET (i.e. IN THE VIEWPORT)\r\n    let sceneGraph : SceneGraph = game.getSceneGraph();\r\n    let spritesInSceneText : TextToRender = new TextToRender(\"Sprites in Scene\", \"\", 20, 50, function() {\r\n        spritesInSceneText.text = \"Sprites in Scene: \" + sceneGraph.getNumSprites();\r\n    });\r\n    let viewportText : TextToRender = new TextToRender(\"Viewport\", \"\", 20, 70, function() {\r\n        let viewport : Viewport = sceneGraph.getViewport();\r\n        viewportText.text = \"Viewport (w, h, x, y): (\"  + viewport.getWidth() + \", \"\r\n                                                        + viewport.getHeight() + \", \"\r\n                                                        + viewport.getX() + \", \"\r\n                                                        + viewport.getY() + \")\";\r\n    });\r\n    let spritesInViewportText : TextToRender = new TextToRender(\"Sprites in Viewport\", \"\", 20, 90, function() {\r\n        spritesInViewportText.text = \"Sprites in Viewport: \" + sceneGraph.numViewport();\r\n    });\r\n    let worldDimensionsText : TextToRender = new TextToRender(\"World Dimensions\", \"\", 20, 110, function() {\r\n        worldDimensionsText.text = \"World Dimensions (w, h): (\" + worldWidth + \", \" + worldHeight + \")\";\r\n    });\r\n    let textRenderer = game.getRenderingSystem().getTextRenderer();\r\n    textRenderer.addTextToRender(spritesInSceneText);\r\n    textRenderer.addTextToRender(viewportText);\r\n    textRenderer.addTextToRender(spritesInViewportText);\r\n    textRenderer.addTextToRender(worldDimensionsText);\r\n\r\n    // AND START THE GAME LOOP\r\n    game.start();\r\n});","/*\r\n * Game is the focal point of the application, it has 4 subsystems,\r\n * the resource manager, the scene graph, the rendering system, and\r\n * the UI controller. In addition it serves as the game loop, providing\r\n * both an update and draw function that is called on a schedule.\r\n */\r\nimport {GameLoopTemplate} from './loop/GameLoopTemplate'\r\nimport {WebGLGameRenderingSystem} from './rendering/WebGLGameRenderingSystem'\r\nimport {SceneGraph} from './scene/SceneGraph'\r\nimport {AnimatedSprite} from './scene/sprite/AnimatedSprite'\r\nimport {TiledLayer} from './scene/tiles/TiledLayer'\r\nimport {ResourceManager} from './files/ResourceManager'\r\nimport {UIController} from './ui/UIController'\r\nimport {Viewport} from './scene/Viewport'\r\n\r\nexport class Game extends GameLoopTemplate {\r\n    private resourceManager : ResourceManager;\r\n    private sceneGraph : SceneGraph;\r\n    private renderingSystem : WebGLGameRenderingSystem;\r\n    private uiController : UIController;\r\n\r\n    public constructor(gameCanvasId : string, textCanvasId : string) {\r\n        super();\r\n        this.resourceManager= new ResourceManager();\r\n        this.sceneGraph= new SceneGraph();\r\n        this.renderingSystem= new WebGLGameRenderingSystem(gameCanvasId, textCanvasId);\r\n        this.uiController = new UIController(gameCanvasId, this.sceneGraph);\r\n\r\n        // MAKE SURE THE SCENE GRAPH' S VIEWPORT IS PROPERLY SETUP\r\n        let viewportWidth : number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).width;\r\n        let viewportHeight : number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).height;\r\n        let viewport : Viewport = new Viewport(viewportWidth, viewportHeight);\r\n        this.sceneGraph.setViewport(viewport);\r\n    }\r\n\r\n    public getRenderingSystem() : WebGLGameRenderingSystem {\r\n        return this.renderingSystem;\r\n    }\r\n\r\n    public getResourceManager() : ResourceManager {\r\n        return this.resourceManager;\r\n    }\r\n\r\n    public getSceneGraph() : SceneGraph {\r\n        return this.sceneGraph;\r\n    }\r\n\r\n    public begin() : void {\r\n    }\r\n\r\n    /*\r\n     * This draws the game. Note that we are not currently using the \r\n     * interpolation value, but could once physics is involved.\r\n     */\r\n    public draw(interpolationPercentage : number) : void {\r\n        // GET THE TILED LAYERS TO RENDER FROM THE SCENE GRAPH\r\n        let visibleLayers : Array<TiledLayer>;\r\n        visibleLayers = this.sceneGraph.getTiledLayers();\r\n\r\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\r\n        let visibleSprites : Array<AnimatedSprite>;\r\n        visibleSprites = <Array<AnimatedSprite>>this.sceneGraph.scope();\r\n\r\n        let viewport : Viewport = this.sceneGraph.getViewport();\r\n\r\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\r\n        this.renderingSystem.render(viewport, visibleLayers, visibleSprites);\r\n    }\r\n\r\n    /**\r\n     * Updates the scene.\r\n     */\r\n    public update(delta : number) : void {\r\n        this.sceneGraph.update(delta);\r\n    }\r\n    \r\n    /**\r\n     * Updates the FPS counter.\r\n     */\r\n    public end(fps : number, panic : boolean) : void {\r\n        if (panic) {\r\n            var discardedTime = Math.round(this.resetFrameDelta());\r\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\r\n        }\r\n    }\r\n}","/*\r\n * ResourceManager.js\r\n *\r\n * This class is responsible for managing all shared resources. This means things\r\n * that may be needed by multiple game objects. In this application this means\r\n * textures for the purpose of GPU rendering and animated sprite types.\r\n */\r\nimport { SpriteTypeData, AnimationStateData } from './SpriteTypeData'\r\nimport { MapData, TiledLayerData, TiledLayerProperty, TileSetData } from './MapData'\r\nimport { SceneData, NamedPath } from './SceneData'\r\nimport { WebGLGameRenderingSystem } from '../rendering/WebGLGameRenderingSystem'\r\nimport { WebGLGameTexture } from '../rendering/WebGLGameTexture'\r\nimport { AnimatedSpriteType } from '../scene/sprite/AnimatedSpriteType'\r\nimport { SceneGraph } from '../scene/SceneGraph'\r\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\r\nimport { TileSet } from '../scene/tiles/TileSet'\r\n\r\nexport class ResourceManager {\r\n    // GAME SHADER PROGRAM SOURCE CODE WILL BE LOADED HERE. NOTE THAT\r\n    // WE HAVE ONE MAP FOR MAPPING THE SHADER NAME TO THE SOURCE CODE\r\n    // AND ANOTHER FOR MAPPING THE SHADER NAME TO THE FILE PATH\r\n    private gameShadersSource: Map<string, string> = new Map();\r\n    private gameShadersSourcePaths: Map<string, string> = new Map();\r\n    private numShadersToLoad: number;\r\n    private numShadersLoaded: number;\r\n\r\n    // SPRITE TYPES\r\n    private gameSpriteTypes: Map<string, AnimatedSpriteType> = new Map();\r\n    private gameSpriteTypePaths: Map<string, string> = new Map();\r\n    private numSpriteTypesToLoad: number;\r\n    private numSpriteTypesLoaded: number;\r\n\r\n    // TILE SETS\r\n    private gameTileSets: Map<string, TileSet> = new Map();\r\n    private gameTileSetPaths: Map<string, string> = new Map();\r\n    private numTileSetsToLoad: number;\r\n    private numTileSetsLoaded: number;\r\n\r\n    // GAME TEXTURES \r\n    private gameTextures: Map<string, WebGLGameTexture> = new Map();\r\n    private numTexturesToLoad: number;\r\n    private numTexturesLoaded: number;\r\n\r\n    public constructor() { }\r\n\r\n    // ACCESSOR METHODS\r\n\r\n    public getShaderSource(shaderName: string): string {\r\n        return this.gameShadersSource.get(shaderName);\r\n    }\r\n\r\n    public getAnimatedSpriteType(spriteTypeName: string): AnimatedSpriteType {\r\n        return this.gameSpriteTypes.get(spriteTypeName);\r\n    }\r\n\r\n    public getTileSet(tileSetName: string): TileSet {\r\n        return this.gameTileSets.get(tileSetName);\r\n    }\r\n\r\n    public getTexture(texturePath: string): WebGLGameTexture {\r\n        return this.gameTextures.get(texturePath);\r\n    }\r\n\r\n    public clear() : void {\r\n        // CLEAR THE SHADER SOURCE \r\n        this.gameShadersSource.clear();\r\n        this.gameShadersSourcePaths.clear();\r\n\r\n        // CLEAR THE SPRITE TYPES\r\n        this.gameSpriteTypes.clear();\r\n        this.gameSpriteTypePaths.clear();\r\n\r\n        // CLEAR THE TEXTURES\r\n        this.gameTextures.clear();\r\n\r\n        // WE REALLY SHOULD ADD FUNCTIONALITY TO REMOVE\r\n        // ALL THE RESOURCES FROM THE GPU ONE BY ONE\r\n        // BUT THAT'S SOMETHING FOR THE FUTURE\r\n    }\r\n\r\n    /**\r\n     * loadScene is responsible for loading all the external files needed for\r\n     * playing the game. These will be used for loading the scene, maps,\r\n     * animated sprites, textures, and shaders.\r\n     */\r\n    public loadScene(   scenePath: string,\r\n                        sceneGraph: SceneGraph,\r\n                        renderingSystem: WebGLGameRenderingSystem,\r\n                        callback: Function): void {\r\n        // CLEAR THE SCENE GRAPH TO GET RID OF ALL THE OLD STUFF\r\n        // THAT MAY HAVE BEEN LOADED FOR SOME OTHER LEVEL\r\n        sceneGraph.clear();\r\n\r\n        // CLEAR ALL THE SCENE RESOURCES \r\n        this.clear();\r\n\r\n        // WE HAVE OUR OWN CUSTOM JSON FILE FORMAT TO REPRESENT OUR SCENE\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(scenePath, function (jsonSceneText: string) {\r\n            let sceneData: SceneData = <SceneData>JSON.parse(jsonSceneText);\r\n            thisResourceManager.loadShadersSource(renderingSystem, sceneData.shaderSourcePaths, function () {\r\n                // NEXT LOAD THE MAP, WHICH WILL FORCE A LOADING OF\r\n                // ANY USED TILE SET TEXTURES AS WELL AS THE CREATION\r\n                // OF TILED LAYERS TO BE ADDED TO THE SCENE\r\n                thisResourceManager.loadMap(sceneData.mapPath, renderingSystem, sceneGraph, function () {\r\n                    // NOW THAT THE MAP HAS BEEN LOADED LOAD ALL THE SPRITE TYPES\r\n                    thisResourceManager.loadSpriteTypes(renderingSystem, sceneData.spriteTypePaths, function () {\r\n                        // NOW WE CAN INIT ALL SHADERS\r\n                        thisResourceManager.initAllShaders(renderingSystem, sceneGraph);\r\n\r\n                        callback();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public initAllShaders(  renderingSystem: WebGLGameRenderingSystem,\r\n                            sceneGraph: SceneGraph): void {\r\n        // SETUP THE SPRITE RENDERER FOR USE WITH THE SPRITE SHADER THAT'S BEEN LOADED\r\n        let spriteRendererVertexShaderSource: string = this.getShaderSource(\"SPRITE_VERTEX_SHADER\");\r\n        let spriteRendererFragmentShaderSource: string = this.getShaderSource(\"SPRITE_FRAGMENT_SHADER\");\r\n        renderingSystem.getSpriteRenderer().init(renderingSystem.getWebGL(), spriteRendererVertexShaderSource, spriteRendererFragmentShaderSource, null);\r\n\r\n        // SETUP THE TILED LAYER RENDERER FOR USE WITH THE TILED SHADER THAT'S BEEN LOADED\r\n        let tiledLayerVertexShaderSource: string = this.getShaderSource(\"TILED_LAYER_VERTEX_SHADER\");\r\n        let tiledLayerFragmentShaderSource: string = this.getShaderSource(\"TILED_LAYER_FRAGMENT_SHADER\");\r\n        renderingSystem.getTiledLayerRenderer().init(renderingSystem.getWebGL(), tiledLayerVertexShaderSource, tiledLayerFragmentShaderSource, sceneGraph.getTiledLayers());\r\n    }\r\n\r\n    public loadShadersSource(   renderingSystem: WebGLGameRenderingSystem,\r\n                                namedPaths: Array<NamedPath>,\r\n                                callback: Function): void {\r\n        // START BY LOADING ALL THE SHADER SOURCE FILES THESE CAN THEN BE\r\n        // RETRIEVED LATER BY THE RENDERERS WHEN ITS TIME TO BUILD THE \r\n        // SHADER PROGRAMS\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.numShadersLoaded = 0;\r\n        this.numShadersToLoad = namedPaths.length;\r\n        for (let i: number = 0; i < namedPaths.length; i++) {\r\n            let namedPath: NamedPath = namedPaths[i];\r\n            let shaderName: string = namedPath.name;\r\n            let shaderPath: string = namedPath.path;\r\n            this.loadTextFile(shaderPath, function (shaderSourceCode: string) {\r\n                thisResourceManager.gameShadersSource.set(shaderName, shaderSourceCode);\r\n                thisResourceManager.gameShadersSourcePaths.set(shaderName, shaderPath);\r\n                thisResourceManager.completeLoadingShader(function () {\r\n                    // ALL SOURCE CODE IS LOADED SO DO WHAT'S NEXT\r\n                    callback();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public buildPathToFileInSameDirectory(baseFileWithPath : string, targetFileName : string) : string {\r\n        let lastIndexOfSlash: number = baseFileWithPath.lastIndexOf('/');\r\n        let targetFilePath : string = \"./\";\r\n        if (lastIndexOfSlash > 0)\r\n            targetFilePath = baseFileWithPath.substring(0, lastIndexOfSlash);\r\n        targetFilePath += \"/\" + targetFileName;\r\n        return targetFilePath;\r\n    }\r\n\r\n    public loadMap( mapPath: string,\r\n                    renderingSystem: WebGLGameRenderingSystem,\r\n                    sceneGraph: SceneGraph,\r\n                    callback: Function): void {\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(mapPath, function (jsonMapText: string) {\r\n            let mapData: MapData = <MapData>JSON.parse(jsonMapText);\r\n\r\n            // WE ONLY USE ONE TILE SET\r\n            let tilesetFileName: string = mapData.tilesets[0].image;\r\n            let tilesetFilePath = thisResourceManager.buildPathToFileInSameDirectory(mapPath, tilesetFileName);\r\n\r\n            // USE THE PATHS TOLOAD THE TILE SET TEXTURES\r\n            thisResourceManager.loadTexture(tilesetFilePath, renderingSystem, function (tilesetTexture : WebGLGameTexture) {\r\n                // NOW THAT THE TILE SET TEXTURES HAVE BEEN LOADED,\r\n                // LOAD ALL THEIR ASSOCIATED TILESET DATA\r\n                for (let i = 0; i < mapData.tilesets.length; i++) {\r\n                    let tileSetData : TileSetData = mapData.tilesets[i];\r\n                    let rows : number = Math.ceil(tileSetData.tilecount/tileSetData.columns);\r\n                    let tileSetToAdd : TileSet = new TileSet(\r\n                                                    tileSetData.name,\r\n                                                    tileSetData.columns,\r\n                                                    rows,\r\n                                                    tileSetData.tilewidth,\r\n                                                    tileSetData.tileheight,\r\n                                                    tileSetData.spacing,\r\n                                                    tileSetData.imagewidth,\r\n                                                    tileSetData.imageheight,\r\n                                                    tileSetData.firstgid - 1,\r\n                                                    tilesetTexture);                    \r\n                    thisResourceManager.gameTileSets.set(tileSetToAdd.getName(), tileSetToAdd);\r\n                }\r\n\r\n                // AND NOW THAT THE TILE SETS HAVE BEEN LOADED\r\n                // WE CAN LOAD THE MAP'S TILED LAYERS, THOUGH NOTE\r\n                // IN THIS EXAMPLE WE ARE GOING TO KEEP IT SIMPLE\r\n                // AND ASSUME THERE IS ONLY ONE TILE SET\r\n                for (let i = 0; i < mapData.layers.length; i++) {\r\n                    let layerData : TiledLayerData = mapData.layers[i];\r\n\r\n                    // THIS LINE OF CODE IS FUNKY, WE CAN ONLY DO THIS WITH A SINGLE TILE SET,\r\n                    // SO TO MAKE THIS A REAL GAME ENGINE THIS WOULD NEED TO BE FIXED\r\n                    let layerTileSet : TileSet = thisResourceManager.gameTileSets.values().next().value;\r\n\r\n                    // WE ARE ASSUMING EACH LAYER USES JUST ONE TILE SET, WHICH MIGHT NOT\r\n                    // NECESSARILY BE TRUE. BUT FOR NOW, LET'S JUST MAKE THE LAYERS ALL\r\n                    // USING THE SAME TILE SET, ADD THE TILES, AND THEN ADD THEM TO THE SCENE GRAPH\r\n                    let tiledLayer : TiledLayer = new TiledLayer(layerData.width, layerData.height,layerTileSet);\r\n                    for (let j = 0; j < layerData.data.length; j++) {\r\n                        let tileIndex : number = layerData.data[j] - 1;\r\n                        tiledLayer.addTile(tileIndex);\r\n                    }\r\n                    sceneGraph.addLayer(tiledLayer);\r\n                }\r\n\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Loads the texturePath file argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadTexture(texturePath: string,\r\n        renderingSystem: WebGLGameRenderingSystem,\r\n        callback: Function): void {\r\n        let thisResourceManager = this;\r\n        thisResourceManager.loadImage(texturePath, function (path: string, image: HTMLImageElement) {\r\n            let textureToLoad: WebGLGameTexture = new WebGLGameTexture();\r\n            let id: number = thisResourceManager.gameTextures.size;\r\n            thisResourceManager.gameTextures.set(path, textureToLoad);\r\n            renderingSystem.initWebGLTexture(textureToLoad, id, image, function () {\r\n                callback(textureToLoad);\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadSpriteTypes( renderingSystem : WebGLGameRenderingSystem,\r\n                            spriteTypePaths: Array<NamedPath>,\r\n                            callback: Function): void {\r\n        // THEN LOAD THE TEXTURES WE'LL BE USING\r\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\r\n        this.numSpriteTypesLoaded = 0;\r\n        let thisResourceManager = this;\r\n        for (let namedPath of spriteTypePaths) {\r\n            let name: string = namedPath.name;\r\n            let path: string = namedPath.path;\r\n            this.loadSpriteType(renderingSystem, name, path, function () {\r\n                thisResourceManager.completeLoadingSpriteType(callback);\r\n            });\r\n        }\r\n    }\r\n\r\n    // PRIVATE HELPER METHODS\r\n\r\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\r\n    private loadTextFile(textFilePath: string, callback: Function): void {\r\n        let xobj: XMLHttpRequest = new XMLHttpRequest();\r\n        xobj.overrideMimeType(\"application/json\");\r\n        xobj.open('GET', textFilePath, true);\r\n        xobj.onreadystatechange = function () {\r\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\r\n                callback(xobj.responseText);\r\n            }\r\n        };\r\n        xobj.send(null);\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL SHADER LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingShader(callback: Function): void {\r\n        this.numShadersLoaded++;\r\n        if (this.numShadersLoaded === this.numShadersToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingSpriteType(callback: Function): void {\r\n        this.numSpriteTypesLoaded++;\r\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingTexture(callback: Function): void {\r\n        this.numTexturesLoaded++;\r\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an Image into RAM and once that process is complete it\r\n     * calls the callback method argument, presumably to then load\r\n     * it into GPU memory.\r\n     */\r\n    private loadImage(path: string, callback: Function): void {\r\n        // MAKE THE IMAGE\r\n        var image = new Image();\r\n\r\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\r\n        image.onload = function () {\r\n            callback(path, image);\r\n        }\r\n\r\n        // START IMAGE LOADING\r\n        image.src = path;\r\n    }\r\n\r\n    /*\r\n     * This function loads a single sprite type resource from a JSON file and upon\r\n     * completion calls the callback function.\r\n     */\r\n    private loadSpriteType(renderingSystem : WebGLGameRenderingSystem, spriteTypeName: string, jsonFilePath: string, callback: Function): void {\r\n        let thisResourceManager: ResourceManager = this;\r\n        this.loadTextFile(jsonFilePath, function (jsonText: string) {\r\n            thisResourceManager.loadSpriteTypeData(renderingSystem, jsonFilePath, jsonText, function(spriteType : AnimatedSpriteType) {\r\n                thisResourceManager.gameSpriteTypes.set(spriteTypeName, spriteType);\r\n                thisResourceManager.gameSpriteTypePaths.set(spriteTypeName, jsonFilePath);\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * This helper function loads all the json text into an AnimatedSpriteType\r\n     * object and returns it.\r\n     */\r\n    private loadSpriteTypeData = (  renderingSystem : WebGLGameRenderingSystem, \r\n                                    spriteFilePath : string, \r\n                                    jsonText: string,\r\n                                    callback : Function): void => {\r\n        let jsonData: SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\r\n        let texturePath : string = this.buildPathToFileInSameDirectory(spriteFilePath, jsonData.spriteSheetImage);\r\n        let thisResourceManager : ResourceManager = this;\r\n        this.loadTexture(texturePath, renderingSystem, function(spritesheetTexture : WebGLGameTexture) {\r\n            let spriteWidth: number = jsonData.spriteWidth;\r\n            let spriteHeight: number = jsonData.spriteHeight;\r\n            let animatedSpriteType = new AnimatedSpriteType(spritesheetTexture, spriteWidth, spriteHeight);\r\n            for (let i = 0; i < jsonData.animations.length; i++) {\r\n                let animation = <AnimationStateData>jsonData.animations[i];\r\n                animatedSpriteType.addAnimation(animation.name);\r\n                for (var j = 0; j < animation.frames.length; j++) {\r\n                    var frame = animation.frames[j];\r\n                    animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\r\n                }\r\n            }\r\n            callback(animatedSpriteType);\r\n        });\r\n    }\r\n}","export abstract class GameLoopTemplate {\r\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\r\n    private fps: number;\r\n    private simulationTimestep: number;\r\n    private frameDelta: number;\r\n    private lastFrameTimeMs: number;\r\n    private fpsAlpha: number;\r\n    private fpsUpdateInterval: number;\r\n    private lastFpsUpdate: number;\r\n    private framesSinceLastFpsUpdate: number;\r\n    private numUpdateSteps: number;\r\n    private minFrameDelay: number;\r\n    private running: boolean;\r\n    private started: boolean;\r\n    private panic: boolean;\r\n    private raf: number;\r\n\r\n    constructor() {\r\n        // An exponential moving average of the frames per second.\r\n        this.fps = 60;\r\n\r\n        // The amount of time (in milliseconds) to simulate each time update() runs.\r\n        // See `MainLoop.setSimulationTimestep()` for details.\r\n        this.simulationTimestep = 1000 / this.fps;\r\n\r\n        // The cumulative amount of in-app time that hasn't been simulated yet.\r\n        // See the comments inside animate() for details.\r\n        this.frameDelta = 0;\r\n\r\n        // The timestamp in milliseconds of the last time the main loop was run.\r\n        // Used to compute the time elapsed between frames.\r\n        this.lastFrameTimeMs = 0;\r\n\r\n        // A factor that affects how heavily to weight more recent seconds'\r\n        // performance when calculating the average frames per second. Valid values\r\n        // range from zero to one inclusive. Higher values result in weighting more\r\n        // recent seconds more heavily.\r\n        this.fpsAlpha = 0.9;\r\n\r\n        // The minimum duration between updates to the frames-per-second estimate.\r\n        // Higher values increase accuracy, but result in slower updates.\r\n        this.fpsUpdateInterval = 1000;\r\n\r\n        // The timestamp (in milliseconds) of the last time the `fps` moving\r\n        // average was updated.\r\n        this.lastFpsUpdate = 0;\r\n\r\n        // The number of frames delivered since the last time the `fps` moving\r\n        // average was updated (i.e. since `lastFpsUpdate`).\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // The number of times update() is called in a given frame. This is only\r\n        // relevant inside of animate(), but a reference is held externally so that\r\n        // this variable is not marked for garbage collection every time the main\r\n        // loop runs.\r\n        this.numUpdateSteps = 0;\r\n\r\n        // The minimum amount of time in milliseconds that must pass since the last\r\n        // frame was executed before another frame can be executed. The\r\n        // multiplicative inverse caps the FPS (the default of zero means there is\r\n        // no cap).\r\n        this.minFrameDelay = 0;\r\n\r\n        // Whether the main loop is running.\r\n        this.running = false;\r\n\r\n        // `true` if `MainLoop.start()` has been called and the most recent time it\r\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\r\n        // different than `running` because there is a delay of a few milliseconds\r\n        // after `MainLoop.start()` is called before the application is considered\r\n        // \"running.\" This delay is due to waiting for the next frame.\r\n        this.started = false;\r\n\r\n        // Whether the simulation has fallen too far behind real time.\r\n        // Specifically, `panic` will be set to `true` if too many updates occur in\r\n        // one frame. This is only relevant inside of animate(), but a reference is\r\n        // held externally so that this variable is not marked for garbage\r\n        // collection every time the main loop runs.\r\n        this.panic = false;\r\n    }\r\n\r\n    /**\r\n     * Gets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\r\n     *\r\n     * @return {Number}\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    getSimulationTimestep(): number {\r\n        return this.simulationTimestep;\r\n    }\r\n\r\n    /**\r\n     * Sets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * The perceived frames per second (FPS) is effectively capped at the\r\n     * multiplicative inverse of the simulation timestep. That is, if the\r\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\r\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\r\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\r\n     * times per frame at lower frame rates. Since running update() more times\r\n     * takes more time to process, this can actually slow down the frame rate.\r\n     * Additionally, if the amount of time it takes to run update() exceeds or\r\n     * very nearly exceeds the timestep, the application will freeze and crash\r\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\r\n     * an explanation of what can be done if a spiral of death is occurring).\r\n     *\r\n     * The exception to this is that interpolating between updates for each\r\n     * render can increase the perceived frame rate and reduce visual\r\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\r\n     * this.\r\n     *\r\n     * If you are considering decreasing the simulation timestep in order to\r\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\r\n     * display more than 60 FPS. Whether humans can tell the difference among\r\n     * high frame rates depends on the application, but for reference, film is\r\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\r\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\r\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\r\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\r\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\r\n     *\r\n     * The simulation timestep should typically only be changed at\r\n     * deterministic times (e.g. before the main loop starts for the first\r\n     * time, and not in response to user input or slow frame rates) to avoid\r\n     * introducing non-deterministic behavior. The update timestep should be\r\n     * the same for all players/users in multiplayer/multi-user applications.\r\n     *\r\n     * See also `MainLoop.getSimulationTimestep()`.\r\n     *\r\n     * @param {Number} timestep\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    setSimulationTimestep(timestep: number): void {\r\n        this.simulationTimestep = timestep;\r\n    }\r\n\r\n    /**\r\n     * Returns the exponential moving average of the frames per second.\r\n     *\r\n     * @return {Number}\r\n     *   The exponential moving average of the frames per second.\r\n     */\r\n    getFPS(): number {\r\n        return this.fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum frame rate.\r\n     *\r\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\r\n     * for details.\r\n     *\r\n     * See also `MainLoop.setMaxAllowedFPS()`.\r\n     *\r\n     * @return {Number}\r\n     *   The maximum number of frames per second allowed.\r\n     */\r\n    getMaxAllowedFPS(): number {\r\n        return 1000 / this.minFrameDelay;\r\n    }\r\n\r\n    /**\r\n     * Sets a maximum frame rate.\r\n     *\r\n     * See also `MainLoop.getMaxAllowedFPS()`.\r\n     *\r\n     * @param {Number} [fps=Infinity]\r\n     *   The maximum number of frames per second to execute. If Infinity or not\r\n     *   passed, there will be no FPS cap (although other factors do limit the\r\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\r\n     *   will stop the loop, and when the loop is next started, it will return\r\n     *   to the previous maximum frame rate. Passing negative values will stall\r\n     *   the loop until this function is called again with a positive value.\r\n     *\r\n     * @chainable\r\n     */\r\n    setMaxAllowedFPS(fps: number): void {\r\n        if (typeof fps === 'undefined') {\r\n            fps = Infinity;\r\n        }\r\n        if (fps === 0) {\r\n            this.stop();\r\n        }\r\n        else {\r\n            // Dividing by Infinity returns zero.\r\n            this.minFrameDelay = 1000 / fps;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the amount of time that has not yet been simulated to zero.\r\n     *\r\n     * This introduces non-deterministic behavior if called after the\r\n     * application has started running (unless it is being reset, in which case\r\n     * it doesn't matter). However, this can be useful in cases where the\r\n     * amount of time that has not yet been simulated has grown very large\r\n     * (for example, when the application's tab gets put in the background and\r\n     * the browser throttles the timers as a result). In applications with\r\n     * lockstep the player would get dropped, but in other networked\r\n     * applications it may be necessary to snap or ease the player/user to the\r\n     * authoritative state and discard pending updates in the process. In\r\n     * non-networked applications it may also be acceptable to simply resume\r\n     * the application where it last left off and ignore the accumulated\r\n     * unsimulated time.\r\n     *\r\n     * @return {Number}\r\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\r\n     *   been simulated, but is being discarded as a result of calling this\r\n     *   function.\r\n     */\r\n    resetFrameDelta() : number {\r\n        var oldFrameDelta = this.frameDelta;\r\n        this.frameDelta = 0;\r\n        return oldFrameDelta;\r\n    }\r\n\r\n    /**\r\n     * Starts the main loop.\r\n     *\r\n     * Note that the application is not considered \"running\" immediately after\r\n     * this function returns; rather, it is considered \"running\" after the\r\n     * application draws its first frame. The distinction is that event\r\n     * handlers should remain paused until the application is running, even\r\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\r\n     * current status. To act after the application starts, register a callback\r\n     * with requestAnimationFrame() after calling this function and execute the\r\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\r\n     * times even before the application starts running and without calling\r\n     * `MainLoop.stop()` in between, although there is no reason to do this;\r\n     * the main loop will only start if it is not already started.\r\n     *\r\n     * See also `MainLoop.stop()`.\r\n     */\r\n    start(): void {\r\n        if (!this.started) {\r\n            // Since the application doesn't start running immediately, track\r\n            // whether this function was called and use that to keep it from\r\n            // starting the main loop multiple times.\r\n            this.started = true;\r\n\r\n            // In the main loop, draw() is called after update(), so if we\r\n            // entered the main loop immediately, we would never render the\r\n            // initial state before any updates occur. Instead, we run one\r\n            // frame where all we do is draw, and then start the main loop with\r\n            // the next frame.\r\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    startLoop(timestamp : number): void {\r\n        // Render the initial state before any updates occur.\r\n        this.draw(1);\r\n\r\n        // The application isn't considered \"running\" until the\r\n        // application starts drawing.\r\n        this.running = true;\r\n\r\n        // Reset variables that are used for tracking time so that we\r\n        // don't simulate time passed while the application was paused.\r\n        this.lastFrameTimeMs = timestamp;\r\n        this.lastFpsUpdate = timestamp;\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // Start the main loop.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Returns whether the main loop is currently running.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\r\n     *\r\n     * @return {Boolean}\r\n     *   Whether the main loop is currently running.\r\n     */\r\n    isRunning(): boolean {\r\n        return this.running;\r\n    }\r\n\r\n    /**\r\n     * Stops the main loop.\r\n     *\r\n     * Event handling and other background tasks should also be paused when the\r\n     * main loop is paused.\r\n     *\r\n     * Note that pausing in multiplayer/multi-user applications will cause the\r\n     * player's/user's client to become out of sync. In this case the\r\n     * simulation should exit, or the player/user needs to be snapped to their\r\n     * updated position when the main loop is started again.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\r\n     */\r\n    stop(): void {\r\n        this.running = false;\r\n        this.started = false;\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n\r\n    /**\r\n     * The main loop that runs updates and rendering.\r\n     * \r\n     * @param {DOMHighResTimeStamp} timestamp\r\n     * The current timestamp. In practice this is supplied by\r\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\r\n     * should only be used for comparison to other timestamps because the epoch\r\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\r\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\r\n     * 8) the epoch is the time the page started loading, specifically\r\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\r\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * \r\n     * @ignore\r\n     */\r\n    animate(timestamp : number): void {\r\n        // Run the loop again the next time the browser is ready to render.\r\n        // We set rafHandle immediately so that the next frame can be canceled\r\n        // during the current frame.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n\r\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\r\n        // `MainLoop.setMaxAllowedFPS()`).\r\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\r\n            return;\r\n        }\r\n\r\n        // frameDelta is the cumulative amount of in-app time that hasn't been\r\n        // simulated yet. Add the time since the last frame. We need to track total\r\n        // not-yet-simulated time (as opposed to just the time elapsed since the\r\n        // last frame) because not all actually elapsed time is guaranteed to be\r\n        // simulated each frame. See the comments below for details.\r\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\r\n        this.lastFrameTimeMs = timestamp;\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setBegin()` for additional details on how to use this.\r\n        this.begin(timestamp, this.frameDelta);\r\n\r\n        // Update the estimate of the frame rate, `fps`. Approximately every\r\n        // second, the number of frames that occurred in that second are included\r\n        // in an exponential moving average of all frames per second. This means\r\n        // that more recent seconds affect the estimated frame rate more than older\r\n        // seconds.\r\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\r\n            // Compute the new exponential moving average.\r\n            this.fps =\r\n                // Divide the number of frames since the last FPS update by the\r\n                // amount of time that has passed to get the mean frames per second\r\n                // over that period. This is necessary because slightly more than a\r\n                // second has likely passed since the last update.\r\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\r\n                (1 - this.fpsAlpha) * this.fps;\r\n\r\n            // Reset the frame counter and last-updated timestamp since their\r\n            // latest values have now been incorporated into the FPS estimate.\r\n            this.lastFpsUpdate = timestamp;\r\n            this.framesSinceLastFpsUpdate = 0;\r\n        }\r\n        // Count the current frame in the next frames-per-second update. This\r\n        // happens after the previous section because the previous section\r\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\r\n        // refers to a time just before the current frame was delivered.\r\n        this.framesSinceLastFpsUpdate++;\r\n\r\n        /*\r\n         * A naive way to move an object along its X-axis might be to write a main\r\n         * loop containing the statement `obj.x += 10;` which would move the object\r\n         * 10 units per frame. This approach suffers from the issue that it is\r\n         * dependent on the frame rate. In other words, if your application is\r\n         * running slowly (that is, fewer frames per second), your object will also\r\n         * appear to move slowly, whereas if your application is running quickly\r\n         * (that is, more frames per second), your object will appear to move\r\n         * quickly. This is undesirable, especially in multiplayer/multi-user\r\n         * applications.\r\n         *\r\n         * One solution is to multiply the speed by the amount of time that has\r\n         * passed between rendering frames. For example, if you want your object to\r\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\r\n         * `delta` is the time passed since the last frame. (For convenience, let's\r\n         * move this statement to an update() function that takes `delta` as a\r\n         * parameter.) This way, your object will move a constant distance over\r\n         * time. However, at low frame rates and high speeds, your object will move\r\n         * large distances every frame, which can cause it to do strange things\r\n         * such as move through walls. Additionally, we would like our program to\r\n         * be deterministic. That is, every time we run the application with the\r\n         * same input, we would like exactly the same output. If the time between\r\n         * frames (the `delta`) varies, our output will diverge the longer the\r\n         * program runs due to accumulated rounding errors, even at normal frame\r\n         * rates.\r\n         *\r\n         * A better solution is to separate the amount of time simulated in each\r\n         * update() from the amount of time between frames. Our update() function\r\n         * doesn't need to change; we just need to change the delta we pass to it\r\n         * so that each update() simulates a fixed amount of time (that is, `delta`\r\n         * should have the same value each time update() is called). The update()\r\n         * function can be run multiple times per frame if needed to simulate the\r\n         * total amount of time passed since the last frame. (If the time that has\r\n         * passed since the last frame is less than the fixed simulation time, we\r\n         * just won't run an update() until the the next frame. If there is\r\n         * unsimulated time left over that is less than our timestep, we'll just\r\n         * leave it to be simulated during the next frame.) This approach avoids\r\n         * inconsistent rounding errors and ensures that there are no giant leaps\r\n         * through walls between frames.\r\n         *\r\n         * That is what is done below. It introduces a new problem, but it is a\r\n         * manageable one: if the amount of time spent simulating is consistently\r\n         * longer than the amount of time between frames, the application could\r\n         * freeze and crash in a spiral of death. This won't happen as long as the\r\n         * fixed simulation time is set to a value that is high enough that\r\n         * update() calls usually take less time than the amount of time they're\r\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\r\n         * for a discussion of ways to stop it.\r\n         *\r\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\r\n         * considerations.\r\n         *\r\n         * Further reading for those interested:\r\n         *\r\n         * - http://gameprogrammingpatterns.com/game-loop.html\r\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\r\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\r\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\r\n         */\r\n        this.numUpdateSteps = 0;\r\n        while (this.frameDelta >= this.simulationTimestep) {\r\n            this.update(this.simulationTimestep);\r\n            this.frameDelta -= this.simulationTimestep;\r\n\r\n            /*\r\n             * Sanity check: bail if we run the loop too many times.\r\n             *\r\n             * One way this could happen is if update() takes longer to run than\r\n             * the time it simulates, thereby causing a spiral of death. For ways\r\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\r\n             * happen is if the browser throttles serving frames, which typically\r\n             * occurs when the tab is in the background or the device battery is\r\n             * low. An event outside of the main loop such as audio processing or\r\n             * synchronous resource reads could also cause the application to hang\r\n             * temporarily and accumulate not-yet-simulated time as a result.\r\n             *\r\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\r\n             * updates will simulate at least one second, and it will simulate four\r\n             * seconds with the default value of simulationTimestep. (Safari\r\n             * notifies users that the script is taking too long to run if it takes\r\n             * more than five seconds.)\r\n             *\r\n             * If there are more updates to run in a frame than this, the\r\n             * application will appear to slow down to the user until it catches\r\n             * back up. In networked applications this will usually cause the user\r\n             * to get out of sync with their peers, but if the updates are taking\r\n             * this long already, they're probably already out of sync.\r\n             */\r\n            if (++this.numUpdateSteps >= 240) {\r\n                this.panic = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Render the screen. We do this regardless of whether update() has run\r\n         * during this frame because it is possible to interpolate between updates\r\n         * to make the frame rate appear faster than updates are actually\r\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\r\n         * that.\r\n         *\r\n         * We draw after updating because we want the screen to reflect a state of\r\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\r\n         * draws the very first frame in the application's initial state, before\r\n         * any updates have occurred.) Some sources speculate that rendering\r\n         * earlier in the requestAnimationFrame callback can get the screen painted\r\n         * faster; this is mostly not true, and even when it is, it's usually just\r\n         * a trade-off between rendering the current frame sooner and rendering the\r\n         * next frame later.\r\n         *\r\n         * See `MainLoop.setDraw()` for details about draw() itself.\r\n         */\r\n        this.draw(this.frameDelta / this.simulationTimestep);\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setEnd()` for additional details on how to use this.\r\n        this.end(this.fps, this.panic);\r\n\r\n        this.panic = false;\r\n    }\r\n\r\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\r\n        // begin\r\n        // update\r\n        // draw\r\n        // end\r\n\r\n    /**\r\n     * A function that runs at the beginning of the main loop.\r\n     *\r\n     * The begin() function is typically used to process input before the\r\n     * updates run. Processing input here (in chunks) can reduce the running\r\n     * time of event handlers, which is useful because long-running event\r\n     * handlers can sometimes delay frames.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, begin() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include adjusting HUD calculations or performing long-running\r\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\r\n     * actions should occur in begin() if they affect anything that\r\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\r\n     *\r\n     * @param {Function} begin\r\n     *   The begin() function.\r\n     * @param {Number} [begin.timestamp]\r\n     *   The current timestamp (when the frame started), in milliseconds. This\r\n     *   should only be used for comparison to other timestamps because the\r\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\r\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\r\n     *   except iOS Safari 8) the epoch is the time the page started loading,\r\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\r\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * @param {Number} [begin.delta]\r\n     *   The total elapsed time that has not yet been simulated, in\r\n     *   milliseconds.\r\n     */\r\n    abstract begin(timestamp : number, delta : number) : void;\r\n\r\n    /**\r\n     * A function that runs updates (i.e. AI and physics).\r\n     *\r\n     * The update() function should simulate anything that is affected by time.\r\n     * It can be called zero or more times per frame depending on the frame\r\n     * rate.\r\n     *\r\n     * As with everything in the main loop, the running time of update()\r\n     * directly affects the frame rate. If update() takes long enough that the\r\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\r\n     * update() function that do not need to execute between every frame can be\r\n     * moved into Web Workers. (Various sources on the internet sometimes\r\n     * suggest other scheduling patterns using setTimeout() or setInterval().\r\n     * These approaches sometimes offer modest improvements with minimal\r\n     * changes to existing code, but because JavaScript is single-threaded, the\r\n     * updates will still block rendering and drag down the frame rate. Web\r\n     * Workers execute in separate threads, so they free up more time in the\r\n     * main loop.)\r\n     *\r\n     * This script can be imported into a Web Worker using importScripts() and\r\n     * used to run a second main loop in the worker. Some considerations:\r\n     *\r\n     * - Profile your code before doing the work to move it into Web Workers.\r\n     *   It could be the rendering that is the bottleneck, in which case the\r\n     *   solution is to decrease the visual complexity of the scene.\r\n     * - It doesn't make sense to move the *entire* contents of update() into\r\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\r\n     *   The lowest-hanging fruit is background updates (like calculating\r\n     *   citizens' happiness in a city-building game), physics that doesn't\r\n     *   affect the scene (like flags waving in the wind), and anything that is\r\n     *   occluded or happening far off screen.\r\n     * - If draw() needs to interpolate physics based on activity that occurs\r\n     *   in a worker, the worker needs to pass the interpolation value back to\r\n     *   the main thread so that is is available to draw().\r\n     * - Web Workers can't access the state of the main thread, so they can't\r\n     *   directly modify objects in your scene. Moving data to and from Web\r\n     *   Workers is a pain. The fastest way to do it is with Transferable\r\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\r\n     *   destroying the original reference in the process.\r\n     *\r\n     * You can read more about Web Workers and Transferable Objects at\r\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\r\n     *\r\n     * @param {Function} update\r\n     *   The update() function.\r\n     * @param {Number} [update.delta]\r\n     *   The amount of time in milliseconds to simulate in the update. In most\r\n     *   cases this timestep never changes in order to ensure deterministic\r\n     *   updates. The timestep is the same as that returned by\r\n     *   `MainLoop.getSimulationTimestep()`.\r\n     */\r\n    abstract update(timeStep : number) : void;\r\n\r\n    /**\r\n     * A function that draws things on the screen.\r\n     *\r\n     * The draw() function gets passed the percent of time that the next run of\r\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\r\n     * a decimal. In other words, draw() gets passed how far between update()\r\n     * calls it is. This is useful because the time simulated by update() and\r\n     * the time between draw() calls is usually different, so the parameter to\r\n     * draw() can be used to interpolate motion between frames to make\r\n     * rendering appear smoother. To illustrate, if update() advances the\r\n     * simulation at each vertical bar in the first row below, and draw() calls\r\n     * happen at each vertical bar in the second row below, then some frames\r\n     * will have time left over that is not yet simulated by update() when\r\n     * rendering occurs in draw():\r\n     *\r\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\r\n     *     draw() calls:        |   |   |   |   |   |   |\r\n     *\r\n     * To interpolate motion for rendering purposes, objects' state after the\r\n     * last update() must be retained and used to calculate an intermediate\r\n     * state. Note that this means renders will be up to one update() behind.\r\n     * This is still better than extrapolating (projecting objects' state after\r\n     * a future update()) which can produce bizarre results. Storing multiple\r\n     * states can be difficult to set up, and keep in mind that running this\r\n     * process takes time that could push the frame rate down, so it's often\r\n     * not worthwhile unless stuttering is visible.\r\n     *\r\n     * @param {Function} draw\r\n     *   The draw() function.\r\n     * @param {Number} [draw.interpolationPercentage]\r\n     *   The cumulative amount of time that hasn't been simulated yet, divided\r\n     *   by the amount of time that will be simulated the next time update()\r\n     *   runs. Useful for interpolating frames.\r\n     */\r\n    public abstract draw(interpolationPercentage : number) : void;\r\n\r\n    /**\r\n     * A function that runs at the end of the main loop.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, end() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include cleaning up any temporary state set up by\r\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\r\n     * is too low, or performing long-running updates incrementally. Compared\r\n     * to begin(), generally actions should occur in end() if they use anything\r\n     * that update() or {@link #setDraw draw}() affect.\r\n     *\r\n     * @param {Function} end\r\n     *   The end() function.\r\n     * @param {Number} [end.fps]\r\n     *   The exponential moving average of the frames per second. This is the\r\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\r\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\r\n     *   moves back up). Examples of actions to take if the FPS is too low\r\n     *   include exiting the application, lowering the visual quality, stopping\r\n     *   or reducing activities outside of the main loop like event handlers or\r\n     *   audio playback, performing non-critical updates less frequently, or\r\n     *   increasing the simulation timestep (by calling\r\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\r\n     *   results in more time being simulated per update() call, which causes\r\n     *   the application to behave non-deterministically.\r\n     * @param {Boolean} [end.panic=false]\r\n     *   Indicates whether the simulation has fallen too far behind real time.\r\n     *   Specifically, `panic` will be `true` if too many updates occurred in\r\n     *   one frame. In networked lockstep applications, the application should\r\n     *   wait for some amount of time to see if the user can catch up before\r\n     *   dropping the user. In networked but non-lockstep applications, this\r\n     *   typically indicates that the user needs to be snapped or eased to the\r\n     *   current authoritative state. When this happens, it may be convenient\r\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\r\n     *   updates. In non-networked applications, it may be acceptable to allow\r\n     *   the application to keep running for awhile to see if it will catch up.\r\n     *   However, this could also cause the application to look like it is\r\n     *   running very quickly for a few frames as it transitions through the\r\n     *   intermediate states. An alternative that may be acceptable is to\r\n     *   simply ignore the unsimulated elapsed time by calling\r\n     *   `MainLoop.resetFrameDelta()` even though this introduces\r\n     *   non-deterministic behavior. In all cases, if the application panics\r\n     *   frequently, this is an indication that the main loop is running too\r\n     *   slowly. However, most of the time the drop in frame rate will probably\r\n     *   be noticeable before a panic occurs. To help the application catch up\r\n     *   after a panic caused by a spiral of death, the same steps can be taken\r\n     *   that are suggested above if the FPS drops too low.\r\n     */\r\n    abstract end(fps : number, panic : boolean) : void;\r\n}","/*\r\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\r\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\r\n * coordinate systems to screen coordinate systems.\r\n */\r\nimport {Matrix} from './Matrix'\r\nimport {Vector3} from './Vector3'\r\n\r\nexport namespace MathUtilities {\r\n    export function determinant4x4(result : Matrix) : number {\r\n        let det0 = result.get(0, 0) * (\r\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\r\n        let det1 = result.get(0, 1) * (\r\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\r\n        let det2 = result.get(0, 2) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det3 = result.get(0, 3) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\r\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det = det0 - det1 + det2 - det3;\r\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\r\n        return det;\r\n    }\r\n    export function identity(result : Matrix) : void {\r\n        if (result.getRows() === result.getColumns()) {\r\n            for (let i = 0; i < result.getRows(); i++) {\r\n                for (let j = 0; j < result.getColumns(); j++) {\r\n                    if (i === j)\r\n                        result.set(1.0, i, j);\r\n                    else\r\n                        result.set(0.0, i, j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    export function inverse(result : Matrix, mat : Matrix) : void {\r\n        let det = this.determinant(mat);\r\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\r\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\r\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\r\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\r\n        let temp = new Matrix(4, 4);\r\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\r\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\r\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\r\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\r\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\r\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\r\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\r\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\r\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\r\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\r\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\r\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\r\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\r\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\r\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\r\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                result.set(temp.get(i, j) / det, i, j);\r\n            }\r\n        }\r\n    }\r\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\r\n        // TRANSLATION MATRIX\t\r\n        let translationMatrix = new Matrix(4, 4);\r\n        this.identity(translationMatrix);\r\n        this.translate(translationMatrix, translation);\r\n\r\n        // ROTATION MATRIX\r\n        let rotationMatrix = new Matrix(4, 4);\r\n        this.identity(rotationMatrix);\r\n        this.rotate(rotationMatrix, rotation);\r\n\r\n        // SCALING MATRIX\r\n        let scaleMatrix = new Matrix(4, 4);\r\n        this.identity(scaleMatrix);\r\n        this.scale(scaleMatrix, scale);\r\n\r\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\r\n        this.multiply(result, tempMatrix, scaleMatrix);\r\n    }\r\n\r\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\r\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\r\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\r\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\r\n            + (mat0.get(0, 1) * mat1.get(1, 0))\r\n            + (mat0.get(0, 2) * mat1.get(2, 0))\r\n            + (mat0.get(0, 3) * mat1.get(3, 0));\r\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\r\n            + (mat0.get(1, 1) * mat1.get(1, 0))\r\n            + (mat0.get(1, 2) * mat1.get(2, 0))\r\n            + (mat0.get(1, 3) * mat1.get(3, 0));\r\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\r\n            + (mat0.get(2, 1) * mat1.get(1, 0))\r\n            + (mat0.get(2, 2) * mat1.get(2, 0))\r\n            + (mat0.get(2, 3) * mat1.get(3, 0));\r\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\r\n            + (mat0.get(3, 1) * mat1.get(1, 0))\r\n            + (mat0.get(3, 2) * mat1.get(2, 0))\r\n            + (mat0.get(3, 3) * mat1.get(3, 0));\r\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\r\n            + (mat0.get(0, 1) * mat1.get(1, 1))\r\n            + (mat0.get(0, 2) * mat1.get(2, 1))\r\n            + (mat0.get(0, 3) * mat1.get(3, 1));\r\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\r\n            + (mat0.get(1, 1) * mat1.get(1, 1))\r\n            + (mat0.get(1, 2) * mat1.get(2, 1))\r\n            + (mat0.get(1, 3) * mat1.get(3, 1));\r\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\r\n            + (mat0.get(2, 1) * mat1.get(1, 1))\r\n            + (mat0.get(2, 2) * mat1.get(2, 1))\r\n            + (mat0.get(2, 3) * mat1.get(3, 1));\r\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\r\n            + (mat0.get(3, 1) * mat1.get(1, 1))\r\n            + (mat0.get(3, 2) * mat1.get(2, 1))\r\n            + (mat0.get(3, 3) * mat1.get(3, 1));\r\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\r\n            + (mat0.get(0, 1) * mat1.get(1, 2))\r\n            + (mat0.get(0, 2) * mat1.get(2, 2))\r\n            + (mat0.get(0, 3) * mat1.get(3, 2));\r\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\r\n            + (mat0.get(1, 1) * mat1.get(1, 2))\r\n            + (mat0.get(1, 2) * mat1.get(2, 2))\r\n            + (mat0.get(1, 3) * mat1.get(3, 2));\r\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\r\n            + (mat0.get(2, 1) * mat1.get(1, 2))\r\n            + (mat0.get(2, 2) * mat1.get(2, 2))\r\n            + (mat0.get(2, 3) * mat1.get(3, 2));\r\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\r\n            + (mat0.get(3, 1) * mat1.get(1, 2))\r\n            + (mat0.get(3, 2) * mat1.get(2, 2))\r\n            + (mat0.get(3, 3) * mat1.get(3, 2));\r\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\r\n            + (mat0.get(0, 1) * mat1.get(1, 3))\r\n            + (mat0.get(0, 2) * mat1.get(2, 3))\r\n            + (mat0.get(0, 3) * mat1.get(3, 3));\r\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\r\n            + (mat0.get(1, 1) * mat1.get(1, 3))\r\n            + (mat0.get(1, 2) * mat1.get(2, 3))\r\n            + (mat0.get(1, 3) * mat1.get(3, 3));\r\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\r\n            + (mat0.get(2, 1) * mat1.get(1, 3))\r\n            + (mat0.get(2, 2) * mat1.get(2, 3))\r\n            + (mat0.get(2, 3) * mat1.get(3, 3));\r\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\r\n            + (mat0.get(3, 1) * mat1.get(1, 3))\r\n            + (mat0.get(3, 2) * mat1.get(2, 3))\r\n            + (mat0.get(3, 3) * mat1.get(3, 3));\r\n\r\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\r\n        result.set(r00, 0, 0);\r\n        result.set(r10, 1, 0);\r\n        result.set(r20, 2, 0);\r\n        result.set(r30, 3, 0);\r\n        result.set(r01, 0, 1);\r\n        result.set(r11, 1, 1);\r\n        result.set(r21, 2, 1);\r\n        result.set(r31, 3, 1);\r\n        result.set(r02, 0, 2);\r\n        result.set(r12, 1, 2);\r\n        result.set(r22, 2, 2);\r\n        result.set(r32, 3, 2);\r\n        result.set(r03, 0, 3);\r\n        result.set(r13, 1, 3);\r\n        result.set(r23, 2, 3);\r\n        result.set(r33, 3, 3);\r\n    }\r\n\r\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\r\n        let aspectRatio = viewportWidth / viewportHeight;\r\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\r\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\r\n\r\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\r\n        let n = nearZ;\r\n        let f = farZ;\r\n        let r = Math.tan(fieldOfViewX / 2) * n;\r\n        let t = Math.tan(fieldOfViewY / 2) * n;\r\n\r\n        // 0-3\r\n        result.set(n / r, 0, 0);\r\n        result.set(0.0, 0, 1);\r\n        result.set(0.0, 0, 2);\r\n        result.set(0.0, 0, 3);\r\n        // 4-7\r\n        result.set(0.0, 1, 0);\r\n        result.set(n / t, 1, 1);\r\n        result.set(0.0, 1, 2);\r\n        result.set(0.0, 1, 3);\r\n        // 8-11\r\n        result.set(0.0, 2, 0);\r\n        result.set(0.0, 2, 1);\r\n        result.set((-(f + n)) / (f - n), 2, 2);\r\n        result.set((-2 * f * n) / (f - n), 2, 3);\r\n        // 12-15 \r\n        result.set(0.0, 3, 0);\r\n        result.set(0.0, 3, 1);\r\n        result.set(-1.0, 3, 2);\r\n        result.set(0.0, 3, 3);\r\n    }\r\n\r\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\r\n        // START WITH THE X-AXIS ROTATION\r\n        let xRotationMatrix = new Matrix(4, 4);\r\n        this.identity(xRotationMatrix);\r\n        let thetaX = rotationVector.getThetaX();\r\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\r\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\r\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\r\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\r\n\r\n        // START WITH THE Y-AXIS ROTATION\r\n        let yRotationMatrix = new Matrix(4, 4);\r\n        this.identity(yRotationMatrix);\r\n        let thetaY = rotationVector.getThetaY();\r\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\r\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\r\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\r\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\r\n\r\n        // START WITH THE Z-AXIS ROTATION\r\n        let zRotationMatrix = new Matrix(4, 4);\r\n        this.identity(zRotationMatrix);\r\n        let thetaZ = rotationVector.getThetaZ();\r\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\r\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\r\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\r\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\r\n\r\n        // START WITH THE X-AXIS ROTATION\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.identity(tempMatrix);\r\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\r\n        this.multiply(result, tempMatrix, zRotationMatrix);\r\n    }\r\n\r\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result, scaleVector);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(scaleVector.getX(), 0, 0);\r\n        result.set(scaleVector.getY(), 1, 1);\r\n        result.set(scaleVector.getZ(), 2, 2);\r\n    }\r\n\r\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\r\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\r\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\r\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\r\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\r\n    }\r\n\r\n    export function translate(result : Matrix, translationVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(translationVector.getX(), 0, 3);\r\n        result.set(translationVector.getY(), 1, 3);\r\n        result.set(translationVector.getZ(), 2, 3);\r\n    }\r\n\r\n    export function transpose(result : Matrix, mat : Matrix) : void {\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let temp = mat.get(i, j);\r\n                result.set(temp, j, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\r\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\r\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\r\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\r\n\r\n        // TO TRANSLATE\r\n        let translateVector = this.math.vectorMath.createPositionVector();\r\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\r\n        let translateMatrix = new Matrix(4, 4);\r\n        this.identity(translateMatrix);\r\n        this.translate(translateMatrix, translateVector);\r\n\r\n        // TO ROTATE\r\n        let rotateVector = this.math.vectorMath.createRotationVector();\r\n        rotateVector.set(-pitch, -yaw, -roll);\r\n        let rotateMatrix = new Matrix(4, 4);\r\n        this.rotate(rotateMatrix, rotateVector);\r\n\r\n        // NOW COMBINE THE 2 MATRICES\r\n        this.multiply(result, rotateMatrix, translateMatrix);\r\n    }\r\n\r\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        for (let i = 0; i < vec0.getSize(); i++) {\r\n            let total = vec0.getAt(i) + vec1.getAt(i);\r\n            result.setAt(i, total);\r\n        }\r\n    }\r\n\r\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let result0 = (vec0.getY() * vec1.getZ())\r\n            - (vec1.getY() * vec0.getZ());\r\n        let result1 = (vec0.getZ() * vec1.getX())\r\n            - (vec1.getZ() * vec0.getX());\r\n        let result2 = (vec0.getX() * vec1.getY())\r\n            - (vec1.getX() * vec0.getY());\r\n        result.setX(result0);\r\n        result.setY(result1);\r\n        result.setZ(result2);\r\n    }\r\n\r\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\r\n        let resultX = vec0.getX() * vec1.getX();\r\n        let resultY = vec0.getY() * vec1.getY();\r\n        let resultZ = vec0.getZ() * vec1.getZ();\r\n        return resultX + resultY + resultZ;\r\n    }\r\n\r\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\r\n        let vecX = vec.getX() * scalar;\r\n        let vecY = vec.getY() * scalar;\r\n        let vecZ = vec.getZ() * scalar;\r\n        result.setX(vecX);\r\n        result.setY(vecY);\r\n        result.setZ(vecZ);\r\n    }\r\n\r\n    export function normalize(result : Vector3, vec : Vector3) : void {\r\n        let xSquared = vec.getX() * vec.getX();\r\n        let ySquared = vec.getY() * vec.getY();\r\n        let zSquared = vec.getZ() * vec.getZ();\r\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\r\n        result.setX(vec.getX() / distance);\r\n        result.setY(vec.getY() / distance);\r\n        result.setZ(vec.getZ() / distance);\r\n    }\r\n\r\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let resultX = vec0.getX() - vec1.getX();\r\n        let resultY = vec0.getY() - vec1.getY();\r\n        let resultZ = vec0.getZ() - vec1.getZ();\r\n        result.setX(resultX);\r\n        result.setY(resultY);\r\n        result.setZ(resultZ);\r\n    }\r\n}","/*\r\n * A Matrix is used for transforming points from local\r\n * coordinates to world coordinates.\r\n */\r\nexport class Matrix {\r\n    private mat : Float32Array;\r\n    private rows : number;\r\n    private columns : number;\r\n\r\n    public constructor(rows : number, columns : number) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.mat = new Float32Array(rows * columns);\r\n        for (let i = 0; i < (rows * columns); i++)\r\n            this.mat[i] = 0.0;\r\n    }\r\n\r\n    public getData() : Float32Array {\r\n        return this.mat;\r\n    }\r\n\r\n    public getRows() : number {\r\n        return this.rows;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getIndex (rows : number, columns : number) : number {\r\n        return (this.rows * columns) + rows;\r\n    }\r\n    \r\n    public get (row : number, column : number) : number {\r\n        let index = this.getIndex(row, column);\r\n        let valueToReturn = this.mat[index];\r\n        return valueToReturn;\r\n    }\r\n\r\n    public set (value : number, row : number, column : number) {\r\n        let index = this.getIndex(row, column);\r\n        this.mat[index] = value;\r\n    }\r\n    \r\n    public print () : void {\r\n        let maxWidth = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let testNum = this.get(j, i) + \"\";\r\n                if (testNum.length > maxWidth) {\r\n                    maxWidth = testNum.length;\r\n                }\r\n            }\r\n        }\r\n        let text = \"[ \";\r\n        for (let i = 0; i < this.rows; i++) {\r\n            if (i > 0)\r\n                text += \"  \";\r\n            for (var j = 0; j < this.columns; j++) {\r\n                var numText = this.get(i, j) + \"\";\r\n                while (numText.length < maxWidth) {\r\n                    numText = \" \" + numText;\r\n                }\r\n                text += numText;\r\n                if (j < (this.columns - 1)) {\r\n                    text += \",\";\r\n                }\r\n                text += \" \";\r\n            }\r\n            if (i < (this.rows - 1)) {\r\n                text += \"\\n\";\r\n            }\r\n            text += \"]\";\r\n            console.log(text);\r\n        }\r\n    }\r\n}","/**\r\n * Vector3\r\n * \r\n * The Vector3 class can be used for any 2d or 3d point, vector, \r\n * or rotation (i.e. angles of orientation).\r\n */\r\nexport class Vector3 {\r\n    private vec : Float32Array;\r\n    private size : number;\r\n\r\n    public constructor() {\r\n        this.vec = new Float32Array(4);\r\n        for (let i = 0; i < 4; i++)\r\n            this.vec[i] = 0.0;\r\n        this.size = 4;\r\n    }\r\n\r\n    public getSize() : number {\r\n        return this.size;\r\n    }\r\n\r\n    public getAt(index : number) : number {\r\n        return this.vec[index];\r\n    }\r\n\r\n    public getX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public getW() : number {\r\n        return this.vec[3];\r\n    }\r\n\r\n    public getThetaX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getThetaY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getThetaZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\r\n        this.vec[0] = init0;\r\n        this.vec[1] = init1;\r\n        this.vec[2] = init2;\r\n        this.vec[3] = init3;\r\n    }\r\n\r\n    public setAt(index : number, value : number) : void {\r\n        this.vec[index] = value;\r\n    }\r\n\r\n    public setX(initX : number) : void {\r\n        this.vec[0] = initX;\r\n    }\r\n\r\n    public setY(initY : number) : void {\r\n        this.vec[1] = initY;\r\n    }\r\n\r\n    public setZ(initZ : number) : void {\r\n        this.vec[2] = initZ;\r\n    }\r\n\r\n    public setW(initW : number) : void {\r\n        this.vec[3] = initW;\r\n    }\r\n\r\n    public setThetaX(initThetaX : number) : void {\r\n        this.setX(initThetaX);\r\n    }\r\n\r\n    public setThetaY(initThetaY : number) : void {\r\n        this.setY(initThetaY);\r\n    }\r\n\r\n    public setThetaZ(initThetaZ : number) : void {\r\n        this.setZ(initThetaZ);\r\n    }\r\n\r\n    public print() : void {\r\n        let text = \"[\";\r\n        for (let i = 0; i < this.size; i++) {\r\n            text += this.vec[i];\r\n            if (i < (this.size - 1)) {\r\n                text += \", \";\r\n            }\r\n        }\r\n        text += \"]\";\r\n        console.log(text);\r\n    }\r\n}","/*\r\n * This class renders text to a canvas, updated each frame.\r\n */\r\nexport class TextToRender {\r\n    public id : string;\r\n    public text : string;\r\n    public x : number;\r\n    public y : number;\r\n    public update : Function;\r\n    public fontFamily : string;\r\n    public fontSize : number;\r\n    public fontColor : string;\r\n    public properties : Map<string, object>;\r\n\r\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\r\n        this.id = initId;\r\n        this.text = initText;\r\n        this.x = initX;\r\n        this.y = initY;\r\n        this.update = initUpdate;\r\n        this.fontFamily = \"\";\r\n        this.fontSize = 0;\r\n        this.fontColor = \"\";\r\n        this.properties = new Map();\r\n    }\r\n}\r\n\r\nexport class TextRenderer {\r\n    private textToRender : Array<TextToRender>;\r\n    private textCanvas : HTMLCanvasElement;\r\n    private textCanvasWidth : number;\r\n    private textCanvasHeight : number;\r\n    private textCtx : CanvasRenderingContext2D;\r\n    private defaultFontFamily : string;\r\n    private defaultFontSize : number;\r\n    private defaultFontColor : string;\r\n\r\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\r\n        this.textToRender = new Array();\r\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\r\n        this.textCanvas.width = window.innerWidth;\r\n        this.textCanvas.height = window.innerHeight;\r\n        this.textCanvasWidth = this.textCanvas.width;\r\n        this.textCanvasHeight = this.textCanvas.height;\r\n        this.textCtx = this.textCanvas.getContext(\"2d\");\r\n        this.defaultFontFamily = initFontFamily;\r\n        this.defaultFontSize = initFontSize;\r\n        this.defaultFontColor = initFontColor;\r\n    }\r\n    \r\n    public addTextToRender(textToAdd : TextToRender) : void {\r\n        textToAdd.fontFamily = this.defaultFontFamily;\r\n        textToAdd.fontSize = this.defaultFontSize;\r\n        textToAdd.fontColor = this.defaultFontColor;\r\n        this.textToRender.push(textToAdd);\r\n    }\r\n\r\n    public clear() : void {\r\n        this.textToRender = [];\r\n    }\r\n\r\n    public getCanvasWidth() : number {\r\n        return this.textCanvasWidth;\r\n    }\r\n\r\n    public getCanvasHeight() : number {\r\n        return this.textCanvasHeight;\r\n    }\r\n\r\n    public render() : void {\r\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\r\n        for (var i = 0; i < this.textToRender.length; i++) {\r\n            var textToRender = this.textToRender[i];\r\n            textToRender.update();\r\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\r\n            this.textCtx.fillStyle = textToRender.fontColor;\r\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\r\n        }\r\n    }\r\n}","import { WebGLGameShader } from './WebGLGameShader'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\n\r\nexport abstract class WebGLGameRenderingComponent {\r\n    protected readonly A_POSITION = \"a_Position\";\r\n    protected readonly A_TEX_COORD = \"a_TexCoord\";\r\n    protected readonly U_MESH_TRANSFORM = \"u_MeshTransform\";\r\n    protected readonly U_TEX_COORD_FACTOR = \"u_TexCoordFactor\";\r\n    protected readonly U_TEX_COORD_SHIFT = \"u_TexCoordShift\";\r\n    protected readonly U_SAMPLER = \"u_Sampler\";\r\n    protected readonly NUM_VERTICES = 4;\r\n    protected readonly FLOATS_PER_VERTEX = 2;\r\n    protected readonly FLOATS_PER_TEXTURE_COORDINATE = 2;\r\n    protected readonly TOTAL_BYTES = 16;\r\n    protected readonly VERTEX_POSITION_OFFSET = 0;\r\n    protected readonly TEXTURE_COORDINATE_OFFSET = 8;\r\n    protected readonly INDEX_OF_FIRST_VERTEX = 0;\r\n\r\n    // THESE WILL BE PROVIDED CUSTOMLY AFTER CONSTRUCTION DURING init\r\n    protected shader: WebGLGameShader;\r\n    protected vertexDataBuffer: WebGLBuffer;\r\n    protected webGLAttributeLocations: Map<string, GLuint>;\r\n    protected webGLUniformLocations: Map<string, WebGLUniformLocation>;\r\n\r\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n    protected meshTransform: Matrix;\r\n    protected meshTranslate: Vector3;\r\n    protected meshRotate: Vector3;\r\n    protected meshScale: Vector3;\r\n\r\n    constructor() {\r\n        // WE'LL MANAGE THESE FOR OUR WebGL SHADERS\r\n        this.webGLAttributeLocations = new Map();\r\n        this.webGLUniformLocations = new Map();\r\n\r\n        // WE'LL USE THESE FOR TRANSLATING, ROTATING, AND SCALING THE MESH\r\n        this.meshTransform = new Matrix(4, 4);\r\n        this.meshTranslate = new Vector3();\r\n        this.meshRotate = new Vector3();\r\n        this.meshScale = new Vector3();\r\n    }\r\n\r\n    public init(webGL: WebGLRenderingContext,\r\n                vertexShaderSource: string,\r\n                fragmentShaderSource: string,\r\n                renderSetupData: object): void {\r\n        // FIRST WE NEED TO MAKE THE SHADER\r\n        this.shader = new WebGLGameShader();\r\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\r\n\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexDataBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\r\n\r\n        // MAKE THE MESH DATA OURSELVES IN A CHILD CLASS\r\n        let meshVertexData : Float32Array = this.getVertexData(renderSetupData);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, meshVertexData, webGL.STATIC_DRAW);\r\n\r\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\r\n        this.loadAttributeLocations(webGL, this.getShaderAttributeNames());\r\n        this.loadUniformLocations(webGL, this.getShaderUniformNames());\r\n    }\r\n\r\n    public abstract getVertexData(renderData : object) : Float32Array;\r\n    public abstract getShaderAttributeNames(): string[];\r\n    public abstract getShaderUniformNames(): string[];\r\n\r\n    /**\r\n     * This function loads all the attribute data values so that we can\r\n     * retrieve them later when it is time to render. Note that this function\r\n     * can only be called after the shader program has been created.\r\n     */\r\n    protected loadAttributeLocations(webGL: WebGLRenderingContext, attributeLocationNames: Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName: string = attributeLocationNames[i];\r\n            let location: GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations.set(locationName, location);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function loads all the uniform data values so that we can\r\n     * retrieve them later when it is time to render. Note that this function\r\n     * can only be called after the shader program has been created.\r\n     */\r\n    protected loadUniformLocations(webGL: WebGLRenderingContext, uniformLocationNames: Array<string>) {\r\n        for (let i: number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName: string = uniformLocationNames[i];\r\n            let location: WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations.set(locationName, location);\r\n        }\r\n    }\r\n}","/*\r\n * This serves as the subsystem that manages all game rendering.\r\n */\r\nimport { TextRenderer } from './TextRenderer'\r\nimport { WebGLGameTiledLayerRenderer } from './WebGLGameTiledLayerRenderer'\r\nimport { WebGLGameSpriteRenderer } from './WebGLGameSpriteRenderer'\r\nimport { WebGLGameTexture } from './WebGLGameTexture';\r\nimport { AnimatedSprite } from '../scene/sprite/AnimatedSprite'\r\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\r\nimport { Viewport } from '../scene/Viewport'\r\n\r\n\r\nexport class WebGLGameRenderingSystem {\r\n    private renderingCanvas: HTMLCanvasElement;\r\n    private webGL: WebGLRenderingContext;\r\n    private canvasWidth: number;\r\n    private canvasHeight: number;\r\n\r\n    // OUR GAMES RENDER THREE DIFFERENT TYPES OF THINGS\r\n    private tiledLayerRenderer: WebGLGameTiledLayerRenderer;\r\n    private spriteRenderer: WebGLGameSpriteRenderer;\r\n    private textRenderer: TextRenderer;\r\n\r\n    public constructor( renderingCanvasId: string,\r\n                        textCanvasId: string) {\r\n        // FIRST SETUP webGL\r\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\r\n        this.renderingCanvas.width = window.innerWidth;\r\n        this.renderingCanvas.height = window.innerHeight;\r\n        this.canvasWidth = this.renderingCanvas.width;\r\n        this.canvasHeight = this.renderingCanvas.height;\r\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\r\n\r\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\r\n        // WebGL THEN THERE'S NO POINT OF GOING ON\r\n        if (!this.webGL) {\r\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\r\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\r\n            console.error(\"WebGL is not supported by this device\");\r\n\r\n            // AND END INITIALIZATION\r\n            return;\r\n        }\r\n\r\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\r\n\r\n        // MAKE THE CLEAR COLOR BLACK\r\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n        // ENABLE DEPTH TESTING\r\n        this.webGL.disable(this.webGL.DEPTH_TEST);\r\n        this.webGL.enable(this.webGL.BLEND);\r\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\r\n\r\n        // TURN ON BACKFACE CULLING\r\n        this.webGL.enable(this.webGL.CULL_FACE);\r\n\r\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\r\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n        // MAKE THE TILED LAYER RENDERER\r\n        this.tiledLayerRenderer = new WebGLGameTiledLayerRenderer();\r\n\r\n        // MAKE THE SPRITE RENDERER\r\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\r\n\r\n        // THIS WILL STORE OUR TEXT\r\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\r\n    }\r\n\r\n    public getTextureConstant(id: number): number {\r\n        // WE ONLY ALLOW FOR 10 TEXTURES TO BE PUT ON THE GPU\r\n        switch (id) {\r\n            case 0: return this.webGL.TEXTURE0;\r\n            case 1: return this.webGL.TEXTURE1;\r\n            case 2: return this.webGL.TEXTURE2;\r\n            case 3: return this.webGL.TEXTURE3;\r\n            case 4: return this.webGL.TEXTURE4;\r\n            case 5: return this.webGL.TEXTURE5;\r\n            case 6: return this.webGL.TEXTURE6;\r\n            case 7: return this.webGL.TEXTURE7;\r\n            case 8: return this.webGL.TEXTURE8;\r\n            default: return this.webGL.TEXTURE9;\r\n        }\r\n    }\r\n\r\n    public getWebGL(): WebGLRenderingContext {\r\n        return this.webGL;\r\n    }\r\n\r\n    public getTiledLayerRenderer(): WebGLGameTiledLayerRenderer {\r\n        return this.tiledLayerRenderer;\r\n    }\r\n\r\n    public getSpriteRenderer(): WebGLGameSpriteRenderer {\r\n        return this.spriteRenderer;\r\n    }\r\n\r\n    public getTextRenderer(): TextRenderer {\r\n        return this.textRenderer;\r\n    }\r\n\r\n    public initWebGLTexture(textureToInit: WebGLGameTexture, textureId: number, image: HTMLImageElement, callback: Function): void {\r\n        textureToInit.width = image.width;\r\n        textureToInit.height = image.height;\r\n\r\n        // CREATE A WebGL TEXTURE ON THE GPU\r\n        textureToInit.webGLTexture = this.webGL.createTexture();\r\n        textureToInit.webGLTextureId = textureId;\r\n\r\n        // FLIP THE IMAGE'S y-AXIS\r\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\r\n\r\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\r\n        //let textureNumName : string = \"TEXTURE\" + textureId;\r\n        let textureNameConstant: number = this.getTextureConstant(textureId);\r\n        this.webGL.activeTexture(textureNameConstant);\r\n\r\n        // BIND THE TEXTURE TO A 2D TYPE\r\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\r\n\r\n        // SPECIFY RENDERING SETTINGS\r\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\r\n\r\n        // SET THE IMAGE FOR THE TEXTURE\r\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\r\n\r\n        // KEEP IT FOR WHEN WE RENDER\r\n        callback();\r\n    }\r\n\r\n    public setClearColor(r: number, g: number, b: number, a: number): void {\r\n        this.webGL.clearColor(r, g, b, a);\r\n    }\r\n\r\n    public render(  viewport : Viewport,\r\n                    tiledLayers: Array<TiledLayer>,\r\n                    visibleSprites: Array<AnimatedSprite>): void {\r\n        // CLEAR THE CANVAS\r\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\r\n\r\n        // RENDER THE TILED LAYER FIRST\r\n        this.tiledLayerRenderer.render(this.webGL, viewport, tiledLayers);\r\n\r\n        // RENDER THE SPRITES ON ONE CANVAS\r\n        this.spriteRenderer.render(this.webGL, viewport, visibleSprites);\r\n\r\n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\r\n        this.textRenderer.render();\r\n    }\r\n}","/*\r\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\r\n * using WebGL's programmable pipeline.\r\n */\r\nexport class WebGLGameShader {\r\n    private program : WebGLProgram;\r\n    private vertexShader : WebGLShader;\r\n    private fragmentShader : WebGLShader;\r\n\r\n    public constructor() {}\r\n\r\n    public getProgram() : WebGLProgram {\r\n        return this.program;\r\n    }\r\n\r\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\r\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\r\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\r\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\r\n    }\r\n\r\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\r\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\r\n        var shader = webGL.createShader(type);\r\n        webGL.shaderSource(shader, source);\r\n        webGL.compileShader(shader);\r\n\r\n        // DID IT COMPILE?\r\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\r\n        if (success) {\r\n            return shader;\r\n        }\r\n\r\n        // DISASTER\r\n        console.log(webGL.getShaderInfoLog(shader));\r\n        webGL.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\r\n        // MAKE THE GLSL SHADER PROGRAM\r\n        let programToCreate = webGL.createProgram();\r\n\r\n        // LINK THE VERT AND FRAG\r\n        webGL.attachShader(programToCreate, vShader);\r\n        webGL.attachShader(programToCreate, fShader);\r\n\r\n        // NOW WE CAN LINK THE SHADER PROGRAM\r\n        webGL.linkProgram(programToCreate);\r\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\r\n\r\n        // IS IT LINKED?\r\n        if (!linked) {\r\n            // DISASTER\r\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\r\n            console.log(errorFeedback);\r\n\r\n            // DISASTER\r\n            console.log(webGL.getProgramInfoLog(programToCreate));\r\n            webGL.deleteProgram(programToCreate);\r\n        }\r\n        return programToCreate;\r\n    }\r\n}","import {WebGLGameRenderingComponent} from './WebGLGameRenderingComponent'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\nimport {WebGLGameTexture} from './WebGLGameTexture'\r\nimport {Viewport} from '../scene/Viewport'\r\n\r\nexport class WebGLGameSpriteRenderer extends WebGLGameRenderingComponent {\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public getVertexData() : Float32Array {\r\n        return new Float32Array([\r\n            -0.5,  0.5, 0.0, 0.0,\r\n            -0.5, -0.5, 0.0, 1.0,\r\n             0.5,  0.5, 1.0, 0.0,\r\n             0.5, -0.5, 1.0, 1.0\r\n        ]);\r\n    }\r\n    public getShaderAttributeNames() : string[] {\r\n        return [this.A_POSITION, this.A_TEX_COORD];\r\n    }\r\n    public getShaderUniformNames() : string[] {\r\n        return [this.U_MESH_TRANSFORM, this.U_SAMPLER, this.U_TEX_COORD_FACTOR, this.U_TEX_COORD_SHIFT];\r\n    }\r\n\r\n    public render(  webGL : WebGLRenderingContext,\r\n                    viewport : Viewport,\r\n                    visibleSprites : Array<AnimatedSprite>) : void {\r\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n       // AND THEN RENDER EACH ONE\r\n       for (let sprite of visibleSprites) {\r\n            this.renderAnimatedSprite(webGL, viewport, sprite);        \r\n        }\r\n    }\r\n\r\n    private renderAnimatedSprite(   webGL : WebGLRenderingContext,\r\n                                    viewport : Viewport, \r\n                                    sprite : AnimatedSprite) : void {\r\n        // YOU'LL NEED TO UPDATE THIS METHOD TO MAKE SURE SPRITES SCROLL AND ROTATE\r\n        \r\n        let canvasWidth : number = webGL.canvas.width;\r\n        let canvasHeight : number = webGL.canvas.height;\r\n        let spriteType : AnimatedSpriteType = sprite.getSpriteType();\r\n        let texture : WebGLGameTexture = spriteType.getSpriteSheetTexture();\r\n\r\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\r\n        let spriteWidth : number = spriteType.getSpriteWidth();\r\n        let spriteHeight : number = spriteType.getSpriteHeight();\r\n        let spriteXInPixels : number = sprite.getPosition().getX() + (spriteWidth/2);\r\n        let spriteYInPixels : number = sprite.getPosition().getY() + (spriteHeight/2);\r\n        let spriteXTranslate : number = (spriteXInPixels - (viewport.getX() + viewport.getWidth() / 2)) / (canvasWidth / 2);//(canvasWidth/2))/(canvasWidth/2);\r\n        let spriteYTranslate : number = (spriteYInPixels - (viewport.getY() + viewport.getHeight() / 2)) / (canvasHeight / 2);//(canvasHeight/2))/(canvasHeight/2);\r\n        this.meshTranslate.setX(spriteXTranslate);\r\n        this.meshTranslate.setY(-spriteYTranslate);\r\n\r\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\r\n        let defaultWidth : number = canvasWidth;\r\n        let defaultHeight : number = canvasHeight;\r\n        //let rotation : number = Math.PI/2;\r\n        let scaleXDiff : number = 0;//rotation / 30;\r\n        let scaleYDiff : number = 0;//rotation / 15;\r\n        let scaleX : number = 2*spriteWidth/defaultWidth;\r\n        let scaleY : number = 2*spriteHeight/defaultHeight;\r\n        this.meshScale.set(scaleX + scaleXDiff, scaleY - scaleYDiff, 0.0, 0.0);//1.0, 1.0);\r\n        //this.meshRotate.setZ(Math.PI/2)\r\n\r\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\r\n        MathUtilities.identity(this.meshTransform);\r\n        MathUtilities.model(this.meshTransform, this.meshTranslate, this.meshRotate, this.meshScale);\r\n        \r\n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\r\n        let texCoordFactorX : number = spriteWidth/texture.width;\r\n        let texCoordFactorY : number = spriteHeight/texture.height;\r\n        let spriteLeft : number = sprite.getLeft();\r\n        let spriteTop : number = sprite.getTop();\r\n        let texCoordShiftX : number = spriteLeft/texture.width;\r\n        let texCoordShiftY : number = spriteTop/texture.height;\r\n\r\n        // USE THE ATTRIBUTES\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\r\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\r\n\r\n        // HOOK UP THE ATTRIBUTES\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations.get(this.A_POSITION);\r\n        webGL.vertexAttribPointer(a_PositionLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.VERTEX_POSITION_OFFSET);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n        let a_TexCoordLocation : GLuint = this.webGLAttributeLocations.get(this.A_TEX_COORD);\r\n        webGL.vertexAttribPointer(a_TexCoordLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.TEXTURE_COORDINATE_OFFSET);\r\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\r\n\r\n        // USE THE UNIFORMS\r\n        let u_MeshTransformLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_MESH_TRANSFORM);\r\n        webGL.uniformMatrix4fv(u_MeshTransformLocation, false, this.meshTransform.getData());\r\n        let u_SamplerLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_SAMPLER);\r\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\r\n        let u_TexCoordFactorLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_FACTOR);\r\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\r\n        let u_TexCoordShiftLocation : WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_SHIFT);\r\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\r\n\r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, this.INDEX_OF_FIRST_VERTEX, this.NUM_VERTICES);\r\n    }\r\n}","export class WebGLGameTexture {\r\n    public webGLTextureId: number;\r\n    public webGLTexture: WebGLTexture;\r\n    public image: HTMLImageElement;\r\n    public width : number;\r\n    public height : number;\r\n}","import { MathUtilities } from \"../math/MathUtilities\"\r\nimport { TiledLayer } from \"../scene/tiles/TiledLayer\"\r\nimport { TileSet } from \"../scene/tiles/TileSet\"\r\nimport { WebGLGameRenderingComponent } from './WebGLGameRenderingComponent'\r\nimport { WebGLGameTexture } from './WebGLGameTexture'\r\nimport { Viewport } from '../scene/Viewport'\r\n\r\nexport class WebGLGameTiledLayerRenderer extends WebGLGameRenderingComponent {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * This function generates the array of attribute data needed to \r\n     * render our TiledLayer and puts it in the tiled layer argument.\r\n     */\r\n    public generateVertexData(tiledLayer: TiledLayer): Float32Array {\r\n        let someNumberYouHaveToDetermine : number = 4;\r\n        let dataToFill = [someNumberYouHaveToDetermine];\r\n        let vertexData: Float32Array = new Float32Array(dataToFill);\r\n        return vertexData;\r\n    }\r\n\r\n    public getVertexData(renderSetupData: object): Float32Array {\r\n        // WE WILL NEED THIS TO KNOW HOW LARGE TO MAKE OUR VERTEX DATA BUFFER\r\n        let tiledLayers: Array<TiledLayer> = <Array<TiledLayer>>renderSetupData;\r\n        let tiledLayer: TiledLayer = tiledLayers[0];\r\n        return this.generateVertexData(tiledLayer);\r\n    }\r\n\r\n    public getShaderAttributeNames(): string[] {\r\n        // YOU'LL NEED TO DEFINE THIS METHOD\r\n        return [];\r\n    }\r\n\r\n    public getShaderUniformNames(): string[] {\r\n        // YOU'LL NEED TO DEFINE THIS METHOD\r\n        return [];\r\n    }\r\n\r\n    public render(  webGL: WebGLRenderingContext,\r\n                    viewport : Viewport,\r\n                    tiledLayers: Array<TiledLayer>): void {\r\n\r\n            // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n        // AND THEN RENDER EACH LAYER\r\n        for (let tiledLayer of tiledLayers) {\r\n            this.renderTiledLayer(webGL, viewport, tiledLayer);\r\n        }\r\n    }\r\n\r\n    private renderTiledLayer(\r\n        webGL: WebGLRenderingContext,\r\n        viewport : Viewport,\r\n        tiledLayer: TiledLayer) {\r\n            // YOU'LL NEED TO DEFINE THIS METHOD\r\n    }\r\n}","import {SceneObject} from './SceneObject'\r\nimport {AnimatedSprite} from './sprite/AnimatedSprite'\r\nimport {TiledLayer} from './tiles/TiledLayer'\r\nimport {TileSet} from './tiles/TileSet'\r\nimport {Viewport} from './Viewport';\r\n\r\nexport class SceneGraph {\r\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\r\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\r\n    // ARE SCENE OBJECTS\r\n    private animatedSprites : Array<AnimatedSprite>;\r\n\r\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\r\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\r\n    // OUR LIST OF ANIMATED SPRITES\r\n    private visibleSet : Array<SceneObject>;\r\n\r\n    // WE ARE ALSO USING A TILING ENGINE FOR RENDERING OUR LEVEL\r\n    // NOTE THAT WE MANAGE THIS HERE BECAUSE WE MAY INVOLVE THE TILED\r\n    // LAYERS IN PHYSICS AND PATHFINDING AS WELL\r\n    private tiledLayers : Array<TiledLayer>;\r\n    private tileSets : Array<TileSet>;\r\n\r\n    // THE VIEWPORT IS USED TO FILTER OUT WHAT IS NOT VISIBLE\r\n    private viewport : Viewport;\r\n\r\n    public constructor() {\r\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\r\n        this.clear();\r\n    }\r\n\r\n    public clear() : void {\r\n        this.animatedSprites = [];\r\n        this.visibleSet = [];\r\n        this.tiledLayers = [];\r\n        this.tileSets = [];\r\n    }\r\n\r\n    public addTileSet(tileSetToAdd : TileSet) : number {\r\n        return this.tileSets.push(tileSetToAdd) - 1;\r\n    }\r\n\r\n    public getNumTileSets() : number {\r\n        return this.tileSets.length;\r\n    }\r\n\r\n    public getTileSet(index : number) : TileSet {\r\n        return this.tileSets[index];\r\n    }\r\n\r\n    public addLayer(layerToAdd : TiledLayer) : void {\r\n        this.tiledLayers.push(layerToAdd);\r\n    }\r\n\r\n    public getNumTiledLayers() : number {\r\n        return this.tiledLayers.length;\r\n    }\r\n\r\n    public getTiledLayers() : Array<TiledLayer> {\r\n        return this.tiledLayers;\r\n    }\r\n\r\n    public getTiledLayer(layerIndex : number) : TiledLayer {\r\n        return this.tiledLayers[layerIndex];\r\n    }\r\n\r\n    public getNumSprites() : number {\r\n        return this.animatedSprites.length;\r\n    }\r\n\r\n    public setViewport(initViewport : Viewport) : void {\r\n        this.viewport = initViewport;\r\n    }\r\n\r\n    public getViewport() : Viewport { \r\n        return this.viewport;\r\n    }\r\n\r\n    public addAnimatedSprite(sprite : AnimatedSprite) : void {\r\n        this.animatedSprites.push(sprite);\r\n    }\r\n\r\n    public getSpriteAt(testX : number, testY : number) : AnimatedSprite {\r\n        for (let sprite of this.animatedSprites) {\r\n            if (sprite.contains(testX, testY))\r\n                return sprite;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public moveMantis() : AnimatedSprite{\r\n        for (let sprite of this.animatedSprites){\r\n            if (sprite.getPlayer() != null){\r\n                return sprite;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * update\r\n     * \r\n     * Called once per frame, this function updates the state of all the objects\r\n     * in the scene.\r\n     * \r\n     * @param delta The time that has passed since the last time this update\r\n     * funcation was called.\r\n     */\r\n    public update(delta : number) : void {\r\n        for (let sprite of this.animatedSprites) {\r\n            sprite.update(delta);\r\n        }\r\n    }\r\n\r\n    public scope() : Array<SceneObject> {\r\n        // CLEAR OUT THE OLD\r\n        this.visibleSet = [];\r\n\r\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\r\n        for (let sprite of this.animatedSprites) {\r\n            this.visibleSet.push(sprite);\r\n        }\r\n\r\n        return this.visibleSet;\r\n    }\r\n\r\n    public numViewport() : number{\r\n        let counter : number;\r\n        counter = 0;\r\n        for (let sprite of this.animatedSprites) {\r\n            if (sprite.getPosition().getX() >= this.viewport.getX() && sprite.getPosition().getX() <= (this.viewport.getX() + this.viewport.getWidth())\r\n            && sprite.getPosition().getY() >= this.viewport.getY() && sprite.getPosition().getY() <= (this.viewport.getY() + this.viewport.getHeight())){\r\n                counter++;\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n}","import {Vector3} from '../math/Vector3'\r\n\r\n/**\r\n * SceneObject\r\n * \r\n * A SceneObject is something that can be placed into the scene graph. It has\r\n * a position, rotation, and scale in the game world. Note that its position\r\n * is typically its centered location, so if we're talking about a 2d box, \r\n * it would be the center of that box.\r\n */\r\nexport abstract class SceneObject {\r\n    private position : Vector3;\r\n    private rotation : Vector3;\r\n    private scale : Vector3;\r\n\r\n    public constructor() {\r\n        this.position = new Vector3();\r\n        this.rotation = new Vector3();\r\n        this.scale = new Vector3();\r\n\r\n        // CLEAR ALL VALUES\r\n        this.position.set(0.0, 0.0, 0.0, 1.0);\r\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\r\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n\r\n    public getPosition() : Vector3 {\r\n        return this.position;\r\n    }    \r\n\r\n    public getRotation() : Vector3 {\r\n        return this.rotation;\r\n    }\r\n\r\n    public getScale() : Vector3 {\r\n        return this.scale;\r\n    }\r\n\r\n    public abstract contains(testX : number, testY : number) : boolean;\r\n}","export class Viewport {\r\n    private width : number;\r\n    private height : number;\r\n    private x : number;\r\n    private y : number;\r\n\r\n    public constructor(initWidth : number, initHeight : number) {\r\n        this.width = initWidth;\r\n        this.height = initHeight;\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    public getWidth() : number {\r\n        return this.width;\r\n    }\r\n\r\n    public getHeight() : number {\r\n        return this.height;\r\n    }\r\n\r\n    public getX() : number {\r\n        return this.x;\r\n    }\r\n\r\n    public getY() : number {\r\n        return this.y;\r\n    }\r\n\r\n    public inc(incX : number, incY : number) : void {\r\n        this.x += incX;\r\n        this.y += incY;\r\n    }\r\n\r\n    public setPosition(initX : number, initY : number) : void {\r\n        this.x = initX;\r\n        this.y = initY;\r\n    }\r\n}","import {SceneObject} from '../SceneObject'\r\nimport {AnimatedSpriteType} from './AnimatedSpriteType'\r\nimport {Behavior} from './Behavior'\r\nimport { SceneGraph } from '../SceneGraph';\r\nimport { BugBehavior1 } from './BugBehavior1';\r\nimport { BugBehavior2 } from './BugBehavior2';\r\n\r\nexport class AnimatedSprite extends SceneObject {\r\n    private spriteType : AnimatedSpriteType;\r\n    private state : string;\r\n    private animationFrameIndex : number;\r\n    private frameCounter : number;\r\n    private behavior: Behavior;\r\n    private player : Boolean;\r\n    //Depending on behavior, //rotation 0 = Up, 1 = right, 2 = down, 3 = left\r\n    private direction : number;\r\n    \r\n    public constructor(initSpriteType : AnimatedSpriteType, initState : string) {\r\n        super();\r\n        this.spriteType = initSpriteType;\r\n        \r\n        // START RESET\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n        this.player = false;\r\n        this.direction = 0;\r\n        this.behavior = null;\r\n    }\r\n\r\n    public setPlayer() : void{\r\n        this.player = true;\r\n    }\r\n\r\n    public getPlayer() : AnimatedSprite{\r\n        if (this.player){\r\n            return this;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getAnimationFrameIndex() : number {\r\n        return this.animationFrameIndex;\r\n    }\r\n\r\n    public getFrameCounter() : number {\r\n        return this.frameCounter;\r\n    }\r\n\r\n    public getSpriteType() : AnimatedSpriteType {\r\n        return this.spriteType;\r\n    }\r\n\r\n    public getState() : string {\r\n        return this.state;\r\n    }\r\n    \r\n    public setState(initState : string) : void {\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n    }\r\n\r\n    public getDirection() : number{\r\n        return this.direction;\r\n    }\r\n\r\n    public setDirection(direction : number) : void{\r\n        this.direction = direction;\r\n    }\r\n\r\n    public addBehavior(state : number, scene : SceneGraph, worldWidth : number, worldHeight : number) : void{\r\n            this.behavior = new BugBehavior1(state, scene, worldWidth, worldHeight);\r\n    }\r\n\r\n    public addBehavior2(state : number, scene : SceneGraph, worldWidth : number, worldHeight : number, player : AnimatedSprite) : void{\r\n            this.behavior = new BugBehavior2(state, scene, worldWidth, worldHeight, player);\r\n    }\r\n    \r\n    public update(delta : number) : void {\r\n        //dont forget to change animation state\r\n        if (this.behavior != null){\r\n            if (this.behavior.getState() == 1){\r\n                if (this.getState() == \"IDLE\"){\r\n                    this.setState(\"WALK\");\r\n                }\r\n                let temp = 0;\r\n                temp = this.behavior.think(this.getPosition().getX(), this.getPosition().getY());\r\n\r\n                switch(temp){\r\n                    case -3:\r\n                        this.setDirection(3);\r\n                        break;\r\n                    case -2:\r\n                        this.setDirection(2);\r\n                        break;\r\n                    case -1:\r\n                        this.setDirection(1);\r\n                        break;\r\n                    case 0:\r\n                        this.setDirection(0);\r\n                        break;\r\n                    case 1:\r\n                        break;\r\n                    case 2:\r\n                        switch(this.direction){\r\n                            case 0:\r\n                                if (this.getPosition().getY() - 5 <= 0){\r\n                                    this.getPosition().setY(0);\r\n                                }else{\r\n                                    this.getPosition().setY(this.getPosition().getY() - 5);\r\n                                }break;\r\n                            case 1:\r\n                                if (this.getPosition().getX() + 5 >= this.behavior.getWidth()){\r\n                                    this.getPosition().setX(this.behavior.getWidth());\r\n                                }else{\r\n                                    this.getPosition().setX(this.getPosition().getX() + 5);\r\n                                }break;\r\n                            case 2:\r\n                                if (this.getPosition().getY() + 5 >= this.behavior.getHeight()){\r\n                                    this.getPosition().setY(this.behavior.getHeight());\r\n                                }else{\r\n                                    this.getPosition().setY(this.getPosition().getY() + 5);\r\n                                }break;\r\n                            case 3:\r\n                                if (this.getPosition().getX() - 5 <= 0){\r\n                                    this.getPosition().setX(0);\r\n                                }else{\r\n                                    this.getPosition().setX(this.getPosition().getX() - 5);\r\n                                }break;\r\n                        }\r\n                        break;\r\n                }\r\n            }else if (this.behavior.getState() == 2){\r\n                let temp = 0;\r\n                temp = this.behavior.think(this.getPosition().getX(), this.getPosition().getY());\r\n\r\n                if (this.behavior.getRunning()){\r\n                    switch(temp){\r\n                        case -3:\r\n                            this.setDirection(3);\r\n                            break;\r\n                        case -2:\r\n                            this.setDirection(2);\r\n                            break;\r\n                        case -1:\r\n                            this.setDirection(1);\r\n                            break;\r\n                        case 0:\r\n                            this.setDirection(0);\r\n                            break;\r\n                    }\r\n                    switch(this.direction){\r\n                        case 0:\r\n                            if (this.getPosition().getY() - 5 <= 0){\r\n                                this.getPosition().setY(0);\r\n                            }else{\r\n                                this.getPosition().setY(this.getPosition().getY() - 5);\r\n                            }break;\r\n                        case 1:\r\n                            if (this.getPosition().getX() + 5 >= this.behavior.getWidth()){\r\n                                this.getPosition().setX(this.behavior.getWidth());\r\n                            }else{\r\n                                this.getPosition().setX(this.getPosition().getX() + 5);\r\n                            }break;\r\n                        case 2:\r\n                            if (this.getPosition().getY() + 5 >= this.behavior.getHeight()){\r\n                                this.getPosition().setY(this.behavior.getHeight());\r\n                            }else{\r\n                                this.getPosition().setY(this.getPosition().getY() + 5);\r\n                            }break;\r\n                        case 3:\r\n                            if (this.getPosition().getX() - 5 <= 0){\r\n                                this.getPosition().setX(0);\r\n                            }else{\r\n                                this.getPosition().setX(this.getPosition().getX() - 5);\r\n                            }break;\r\n                    }\r\n                }else{\r\n                    switch(temp){\r\n                        case -3:\r\n                            this.setDirection(3);\r\n                            break;\r\n                        case -2:\r\n                            this.setDirection(2);\r\n                            break;\r\n                        case -1:\r\n                            this.setDirection(1);\r\n                            break;\r\n                        case 0:\r\n                            this.setDirection(0);\r\n                            break;\r\n                        case 1:\r\n                            if (this.getState() == \"WALK\"){\r\n                                this.setState(\"IDLE\");\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            if (this.getState() == \"IDLE\"){\r\n                                this.setState(\"WALK\");\r\n                            }\r\n                            switch(this.direction){\r\n                                case 0:\r\n                                    if (this.getPosition().getY() - 5 <= 0){\r\n                                        this.getPosition().setY(0);\r\n                                    }else{\r\n                                        this.getPosition().setY(this.getPosition().getY() - 5);\r\n                                    }break;\r\n                                case 1:\r\n                                    if (this.getPosition().getX() + 5 >= this.behavior.getWidth()){\r\n                                        this.getPosition().setX(this.behavior.getWidth());\r\n                                    }else{\r\n                                        this.getPosition().setX(this.getPosition().getX() + 5);\r\n                                    }break;\r\n                                case 2:\r\n                                    if (this.getPosition().getY() + 5 >= this.behavior.getHeight()){\r\n                                        this.getPosition().setY(this.behavior.getHeight());\r\n                                    }else{\r\n                                        this.getPosition().setY(this.getPosition().getY() + 5);\r\n                                    }break;\r\n                                case 3:\r\n                                    if (this.getPosition().getX() - 5 <= 0){\r\n                                        this.getPosition().setX(0);\r\n                                    }else{\r\n                                        this.getPosition().setX(this.getPosition().getX() - 5);\r\n                                    }break;\r\n                            }\r\n                            break;  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.frameCounter++;\r\n        \r\n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\r\n        var currentAnimation = this.spriteType.getAnimation(this.state);\r\n        var currentFrame = currentAnimation[this.animationFrameIndex];\r\n        if (this.frameCounter > (currentFrame.duration)) {\r\n            this.animationFrameIndex++;\r\n            if (this.animationFrameIndex >= currentAnimation.length) {\r\n                this.animationFrameIndex = 0;\r\n            }\r\n            this.frameCounter = 0;\r\n        }\r\n    }\r\n\r\n    public contains(pointX : number, pointY : number) : boolean {\r\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\r\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\r\n        let spriteLeft = this.getPosition().getX();\r\n        let spriteRight = this.getPosition().getX() + spriteWidth;\r\n        let spriteTop = this.getPosition().getY();\r\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\r\n        if (    (pointX < spriteLeft)\r\n            ||  (spriteRight < pointX)\r\n            ||  (pointY < spriteTop)\r\n            ||  (spriteBottom < pointY)) {\r\n                return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\r\n    public getLeft() : number {\r\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\r\n    }\r\n    \r\n    public getTop() : number {\r\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\r\n    }\r\n\r\n    public toString() : string {\r\n        let summary : string =  \"{ position: (\"\r\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\r\n                            +   \"(state: \" + this.getState() + \") \"\r\n                            +   \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\r\n                            +   \"(frameCounter: \" + this.getFrameCounter() + \") \";\r\n        return summary;\r\n    }\r\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\r\n\r\nexport class AnimationFrame {\r\n    public left : number;\r\n    public top : number;\r\n    public duration : number;\r\n\r\n    constructor(initLeft : number, initTop : number, initDuration : number) {\r\n        this.left = initLeft;\r\n        this.top = initTop;\r\n        this.duration = initDuration;\r\n    }\r\n}\r\n\r\nexport class AnimatedSpriteType {\r\n    private spriteSheetTexture : WebGLGameTexture;\r\n    private animations : Map<string, Array<AnimationFrame>>;\r\n    private spriteWidth : number;\r\n    private spriteHeight : number;\r\n\r\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \r\n                initSpriteWidth : number, initSpriteHeight : number) {\r\n        this.spriteSheetTexture = initSpriteSheetTexture;\r\n        this.animations = new Map();\r\n        this.spriteWidth = initSpriteWidth;\r\n        this.spriteHeight = initSpriteHeight;\r\n    }\r\n\r\n    public addAnimation(state : string) : void {\r\n        this.animations.set(state, new Array<AnimationFrame>());\r\n    }\r\n\r\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\r\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\r\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\r\n        var col = index % columns;\r\n        var row = Math.floor(index /  columns);\r\n        var left = col * this.spriteWidth;\r\n        var top = row * this.spriteHeight;\r\n        this.animations.get(state).push(new AnimationFrame(left, top, frameDuration));\r\n    }\r\n\r\n    public getSpriteWidth() : number {\r\n        return this.spriteWidth;\r\n    }\r\n\r\n    public getSpriteHeight() : number {\r\n        return this.spriteHeight;\r\n    }\r\n\r\n    public getSpriteSheetTexture() : WebGLGameTexture {\r\n        return this.spriteSheetTexture;\r\n    }\r\n\r\n    public getAnimation(state : string) : Array<AnimationFrame> {\r\n        return this.animations.get(state);\r\n    }\r\n\r\n    public getLeft(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\r\n        return animationFrame.left;\r\n    }\r\n\r\n    public getTop(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\r\n        return animationFrame.top;\r\n    }\r\n}","import { SceneGraph } from \"../SceneGraph\";\r\n\r\nexport abstract class Behavior{\r\n    private state: number;\r\n    private scene : SceneGraph;\r\n    private worldWidth : number;\r\n    private worldHeight : number;\r\n    private runAway : boolean;\r\n\r\n    //State is what behavior to do, 0 = nothing, 1 = random walk in direction, 2 = patrol back and forth in place then run, 3 = follow mouse\r\n\r\n    public constructor(state: number, scene : SceneGraph, x : number, y : number){\r\n        this.state = state;\r\n        this.scene = scene;\r\n        this.worldWidth = x;\r\n        this.worldHeight = y;\r\n        this.runAway = false;\r\n    }\r\n\r\n    public getRunning() : boolean{\r\n        return this.runAway;\r\n    }\r\n\r\n    public changeRunning() : void{\r\n        if (this.runAway){\r\n            this.runAway = false;\r\n        }else{\r\n            this.runAway = true;\r\n        }\r\n    }\r\n\r\n    public setState(state: number) : void{\r\n        this.state = state;\r\n    }\r\n\r\n    public getState() : number{\r\n        return this.state;\r\n    }\r\n\r\n    public getScene() : SceneGraph{\r\n        return this.scene;\r\n    }\r\n\r\n    public getWidth() : number{\r\n        return this.worldWidth;\r\n    }\r\n\r\n    public getHeight() : number{\r\n        return this.worldHeight;\r\n    }\r\n\r\n    public think(x: number, y : number) : number{\r\n        return 0;\r\n    }\r\n}","import { Behavior } from './Behavior';\r\nimport { SceneGraph } from '../SceneGraph';\r\n\r\nexport class BugBehavior1 extends Behavior {\r\n    private walking : boolean;\r\n    private frameCounter : number;\r\n    //Direction 0 = Up, 1 = right, 2 = down, 3 = left\r\n    private direction : number;\r\n\r\n    public constructor(state : number, scene : SceneGraph, x : number, y : number){\r\n        super(state, scene, x, y);\r\n        this.walking = false;\r\n        this.frameCounter = 0;\r\n        this.direction = 0;\r\n    }\r\n\r\n    public getWalking() : boolean{\r\n        return this.walking;\r\n    }\r\n\r\n    public setWalking() : void{\r\n        this.walking = true;\r\n    }\r\n\r\n    public getFrameCounter() : number{\r\n        return this.frameCounter;\r\n    }\r\n\r\n    public decrementFrames() : void{\r\n        this.frameCounter -= 1;\r\n    }\r\n\r\n    public doneWalking() : void{\r\n        this.walking = false;\r\n    }\r\n\r\n    public randomDirection() : void{\r\n        this.direction = Math.floor(Math.random() * Math.floor(4));\r\n        //Random number of frames from 0 to 300, so 0 to 5 seconds of walking in any direction\r\n        this.frameCounter = Math.floor(Math.random() * Math.floor(300));\r\n        this.setWalking();\r\n    }\r\n\r\n    public think(x : number, y : number) : number{\r\n        if (this.getWalking()){\r\n            if (x <= 0 && this.direction == 3){\r\n                this.decrementFrames();\r\n                if (this.getFrameCounter() == 0){\r\n                    this.doneWalking();\r\n                }\r\n                return 1;\r\n            }else if (x >= this.getWidth() && this.direction == 1){\r\n                this.decrementFrames();\r\n                if (this.getFrameCounter() == 0){\r\n                    this.doneWalking();\r\n                }\r\n                return 1;\r\n            }else if (y <= 0 && this.direction == 0){\r\n                this.decrementFrames();\r\n                if (this.getFrameCounter() == 0){\r\n                    this.doneWalking();\r\n                }\r\n                return 1;\r\n            }else if (y >= this.getHeight() && this.direction == 2){\r\n                this.decrementFrames();\r\n                if (this.getFrameCounter() == 0){\r\n                    this.doneWalking();\r\n                }\r\n                return 1;\r\n            }else{\r\n                this.decrementFrames();\r\n                if (this.getFrameCounter() == 0){\r\n                    this.doneWalking();\r\n                }\r\n                \r\n                return 2;\r\n            }\r\n        }else{\r\n            this.randomDirection();\r\n            this.setWalking();\r\n            if (this.direction == 0){\r\n                return 0;\r\n            }else if (this.direction == 1){\r\n                return -1;\r\n            }else if (this.direction == 2){\r\n                return -2;\r\n            }else{\r\n                return -3;\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { Behavior } from './Behavior';\r\nimport { SceneGraph } from '../SceneGraph';\r\nimport { AnimatedSprite } from './AnimatedSprite';\r\n\r\nexport class BugBehavior2 extends Behavior {\r\n    private walking : boolean;\r\n    private frameCounter : number;\r\n    //Direction 0 = Up, 1 = right, 2 = down, 3 = left\r\n    private direction : number;\r\n    private cooldown : number;\r\n    private player : AnimatedSprite;\r\n\r\n    public constructor(state : number, scene : SceneGraph, x : number, y : number, player : AnimatedSprite){\r\n        super(state, scene, x, y);\r\n        this.walking = false;\r\n        this.frameCounter = 0;\r\n        //Direction 0 = Up, 1 = right, 2 = down, 3 = left\r\n        this.direction = Math.floor(Math.random() * Math.floor(4));\r\n        this.cooldown = 0;\r\n        this.player = player;\r\n    }\r\n\r\n    public getWalking() : boolean{\r\n        return this.walking;\r\n    }\r\n\r\n    public getPlayer() : AnimatedSprite{\r\n        return this.player;\r\n    }\r\n\r\n    public setWalking() : void{\r\n        this.walking = true;\r\n    }\r\n\r\n    public getFrameCounter() : number{\r\n        return this.frameCounter;\r\n    }\r\n\r\n    public decrementFrames() : void{\r\n        this.frameCounter -= 1;\r\n    }\r\n\r\n    public doneWalking() : void{\r\n        this.walking = false;\r\n    }\r\n\r\n    public getCooldown() : number{\r\n        return this.cooldown;\r\n    }\r\n\r\n    public decrementCooldown() : void{\r\n        this.cooldown -= 1;\r\n    }\r\n\r\n    public refreshCooldown() : void{\r\n        this.cooldown = 120;\r\n    }\r\n\r\n    public changeDirection() : void{\r\n        if (this.direction == 0){\r\n            this.direction = 2;\r\n        }else if (this.direction == 1){\r\n            this.direction = 3;\r\n        }else if (this.direction == 2){\r\n            this.direction = 0;\r\n        }else{\r\n            this.direction = 1;\r\n        }\r\n    }\r\n\r\n    public playerNearby(x : number, y : number) : number{\r\n        if (x - this.player.getPosition().getX() <= 60 && x - this.player.getPosition().getX() >= 0){\r\n            this.direction = 1;\r\n            return -1;\r\n        }else if (this.player.getPosition().getX() - x <= 60 && this.player.getPosition().getX() - x >= 0){\r\n            this.direction = 3;\r\n            return -3;\r\n        }else if (y - this.player.getPosition().getY() <= 60 && y - this.player.getPosition().getY() >= 0){\r\n            this.direction = 2;\r\n            return -2;\r\n        }else if (this.player.getPosition().getY() - y <= 60 && this.player.getPosition().getY() - y >= 0){\r\n            this.direction = 0;\r\n            return 0;\r\n        }else{\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    public think(x : number, y : number) : number{\r\n        if (this.playerNearby(x, y) == 1){\r\n            if (this.getRunning()){\r\n                this.changeRunning();\r\n            }\r\n            if (this.getWalking()){\r\n                if (x <= 0 && this.direction == 3){\r\n                    this.decrementFrames();\r\n                    if (this.getFrameCounter() == 0){\r\n                        this.doneWalking();\r\n                        this.refreshCooldown();\r\n                    }\r\n                    return 1;\r\n                }else if (x >= this.getWidth() && this.direction == 1){\r\n                    this.decrementFrames();\r\n                    if (this.getFrameCounter() == 0){\r\n                        this.doneWalking();\r\n                        this.refreshCooldown();\r\n                    }\r\n                    return 1;\r\n                }else if (y <= 0 && this.direction == 0){\r\n                    this.decrementFrames();\r\n                    if (this.getFrameCounter() == 0){\r\n                        this.doneWalking();\r\n                        this.refreshCooldown();\r\n                    }\r\n                    return 1;\r\n                }else if (y >= this.getHeight() && this.direction == 2){\r\n                    this.decrementFrames();\r\n                    if (this.getFrameCounter() == 0){\r\n                        this.doneWalking();\r\n                        this.refreshCooldown();\r\n                    }\r\n                    return 1;\r\n                }else{\r\n                    this.decrementFrames();\r\n                    if (this.getFrameCounter() == 0){\r\n                        this.doneWalking();\r\n                        this.refreshCooldown();\r\n                    }\r\n                    \r\n                    return 2;\r\n                }\r\n            }else{\r\n                if (this.cooldown == 0){\r\n                    this.changeDirection();\r\n                    this.setWalking();\r\n                    this.frameCounter = 60;\r\n                    switch (this.direction){\r\n                        case 0:\r\n                            return 0;\r\n                        case 1:\r\n                            return -1;\r\n                        case 2:\r\n                            return -2;\r\n                        case 3:\r\n                            return -3;\r\n                    }\r\n                }else{\r\n                    this.decrementCooldown();\r\n                    return 1;\r\n                }\r\n            }\r\n        }else{\r\n            if (! this.getRunning()){\r\n                this.changeRunning();\r\n            }\r\n            return this.playerNearby(x, y);\r\n        }\r\n    }\r\n\r\n}","import { WebGLGameTexture } from \"../../rendering/WebGLGameTexture\";\r\n\r\nexport class TileSet {\r\n    private name : string;\r\n    private columns : number;\r\n    private rows : number;\r\n    private tileWidth : number;\r\n    private tileHeight : number;\r\n    private tileSpacing : number;\r\n    private tileSheetWidth : number;\r\n    private tileSheetHeight : number;\r\n    private firstIndex : number;\r\n    private texture : WebGLGameTexture;\r\n\r\n    constructor(initName : string, \r\n                initColumns : number,\r\n                initRows : number,\r\n                initTileWidth : number,\r\n                initTileHeight : number,\r\n                initTileSpacing : number,\r\n                initTileSheetWidth : number,\r\n                initTileSheetHeight : number,\r\n                initFirstIndex : number,\r\n                initTexture : WebGLGameTexture) {\r\n        this.name = initName;\r\n        this.columns = initColumns;\r\n        this.rows = initRows;\r\n        this.tileWidth = initTileWidth;\r\n        this.tileHeight = initTileHeight;\r\n        this.tileSpacing = initTileSpacing;\r\n        this.tileSheetWidth = initTileSheetWidth;\r\n        this.tileSheetHeight = initTileSheetHeight;\r\n        this.firstIndex = initFirstIndex;\r\n        this.texture = initTexture;\r\n    }\r\n\r\n    public getName() : string {\r\n        return this.name;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getRows() : number { \r\n        return this.rows;\r\n    }\r\n\r\n    public getTileWidth() : number {\r\n        return this.tileWidth;\r\n    }\r\n\r\n    public getTileHeight() : number {\r\n        return this.tileHeight;\r\n    }\r\n\r\n    public getTileSpacing() : number {\r\n        return this.tileSpacing;\r\n    }\r\n\r\n    public getTileSheetWidth() : number {\r\n        return this.tileSheetWidth;\r\n    }\r\n\r\n    public getTileSheetHeight() : number {\r\n        return this.tileSheetHeight;\r\n    }\r\n\r\n    public getFirstIndex() : number {\r\n        return this.firstIndex;\r\n    }\r\n\r\n    public getTexture() : WebGLGameTexture {\r\n        return this.texture;\r\n    }\r\n}","import { TileSet } from \"./TileSet\";\r\n\r\nexport class TiledLayer {\r\n    private collidable : boolean;\r\n    private tiles : Array<number>;\r\n    private columns : number;\r\n    private rows : number;\r\n    private tileSet : TileSet;\r\n    \r\n    // WE WILL STORE RENDERING-SPECIFIC DATA HERE\r\n    private renderData : object;\r\n\r\n    constructor(initColumns : number,\r\n                initRows : number,\r\n                initTileSet : TileSet) {\r\n        this.tiles = new Array();\r\n        this.columns = initColumns;\r\n        this.rows = initRows;\r\n        this.tileSet = initTileSet;\r\n    }\r\n\r\n    public setRenderData(initRenderData : object) : void {\r\n        this.renderData = initRenderData;\r\n    }\r\n\r\n    public getRenderData() : object {\r\n        return this.renderData;\r\n    }\r\n\r\n    public getMinimumVisibleColumn(viewportLeft : number) : number {\r\n        return (viewportLeft / this.tileSet.getTileWidth());\r\n    }\r\n\r\n    public getMaximumVisibleColumn(viewportRight : number) : number {\r\n        return (viewportRight / this.tileSet.getTileWidth());\r\n    }\r\n\r\n    public getMinimumVisibleRow(viewportTop : number) : number {\r\n        return (viewportTop / this.tileSet.getTileHeight());\r\n    }\r\n\r\n    public getMaximumVisibleRow(viewportBottom : number) : number {\r\n        return (viewportBottom / this.tileSet.getTileHeight());\r\n    }\r\n\r\n    public getNumCells() : number {\r\n        return this.columns * this.rows;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getRows() : number {\r\n        return this.rows;\r\n    }\r\n\r\n    public getTileSet() : TileSet {\r\n        return this.tileSet;\r\n    }\r\n\r\n    public isCollidable() : boolean {\r\n        return this.collidable;\r\n    }\r\n\r\n    public addTile(tileSetCellIndex : number) : void {\r\n        this.tiles.push(tileSetCellIndex);\r\n    }\r\n\r\n    public setTile(column : number, row : number, tileSetCellIndex : number) {\r\n        let tileIndex : number = this.getTileIndex(column, row);\r\n        this.tiles[tileIndex] = tileSetCellIndex;\r\n    }\r\n\r\n    public getTileIndex(column : number, row : number) : number {\r\n        return (row * this.columns) + column;\r\n    }\r\n\r\n    public getTileSetCellIndex(column : number, row : number) : number {\r\n        let tileIndex : number = this.getTileIndex(column, row);\r\n        return this.tiles[tileIndex];\r\n    }\r\n\r\n    public getTile(column : number, row : number) : number {\r\n        let index = this.getTileIndex(column, row);\r\n        return this.tiles[index];\r\n    }\r\n}","/*\r\n * This provides responses to UI input.\r\n */\r\nimport {AnimatedSprite} from \"../scene/sprite/AnimatedSprite\"\r\nimport {SceneGraph} from \"../scene/SceneGraph\"\r\n\r\nexport class UIController {\r\n    private spriteToDrag : AnimatedSprite;\r\n    private scene : SceneGraph;\r\n    private dragOffsetX : number;\r\n    private dragOffsetY : number;\r\n\r\n    public constructor(canvasId : string, initScene : SceneGraph) {\r\n        this.spriteToDrag = null;\r\n        this.scene = initScene;\r\n        this.dragOffsetX = -1;\r\n        this.dragOffsetY = -1;\r\n\r\n        let canvas : HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\r\n        canvas.tabIndex = 1;\r\n        canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\r\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\r\n        canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\r\n        canvas.addEventListener(\"keydown\", this.dHandler);\r\n        //canvas.addEventListener(\"mouseenter\", this.mouseEnterHandler);\r\n    }\r\n\r\n    public mouseDownHandler = (event : MouseEvent) : void => {\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX + this.scene.getViewport().getX(), mousePressY + this.scene.getViewport().getY());\r\n        console.log(\"mousePressX: \" + mousePressX); //+ this.scene.getViewport().getX());\r\n        console.log(\"mousePressY: \" + mousePressY); //+ this.scene.getViewport().getY());\r\n        console.log(\"sprite: \" + sprite);\r\n        if (sprite != null) {\r\n            // START DRAGGING IT\r\n            this.spriteToDrag = sprite;\r\n            this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\r\n            this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\r\n        }\r\n    }\r\n    \r\n    public mouseMoveHandler = (event : MouseEvent) : void => {\r\n        if (this.spriteToDrag != null) {\r\n            this.spriteToDrag.getPosition().set(event.clientX + this.dragOffsetX, \r\n                                                event.clientY + this.dragOffsetY, \r\n                                                this.spriteToDrag.getPosition().getZ(), \r\n                                                this.spriteToDrag.getPosition().getW());\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler = (event : MouseEvent) : void => {\r\n        this.spriteToDrag = null;\r\n    }\r\n\r\n    public dHandler = (event : KeyboardEvent) : void => {\r\n        let worldWidth : number = this.scene.getTiledLayers()[0].getColumns() * this.scene.getTiledLayers()[0].getTileSet().getTileWidth();\r\n        let worldHeight : number = this.scene.getTiledLayers()[0].getRows() * this.scene.getTiledLayers()[0].getTileSet().getTileHeight();\r\n\r\n        if (event.keyCode == 68){\r\n            console.log(\"KEY PRESSED: d\");\r\n            if (this.scene.getViewport().getX() + 100 >= worldWidth - this.scene.getViewport().getWidth()){\r\n                this.scene.getViewport().setPosition(worldWidth - this.scene.getViewport().getWidth(), this.scene.getViewport().getY());\r\n            }else{\r\n                this.scene.getViewport().inc(100, 0);\r\n            }\r\n        }\r\n        else if (event.keyCode == 65){\r\n            console.log(\"KEY PRESSED: a\");\r\n            if (this.scene.getViewport().getX() - 100 <= 0){\r\n                this.scene.getViewport().setPosition(0, this.scene.getViewport().getY());\r\n            }else{\r\n                this.scene.getViewport().inc(-100, 0);\r\n            }\r\n        }\r\n        else if (event.keyCode == 87){\r\n            console.log(\"KEY PRESSED: w\");\r\n            if (this.scene.getViewport().getY() - 100 <= 0){\r\n                this.scene.getViewport().setPosition(this.scene.getViewport().getX(), 0);\r\n            }else{\r\n                this.scene.getViewport().inc(0, -100);\r\n            }\r\n        }\r\n        else if (event.keyCode == 83){\r\n            console.log(\"KEY PRESSED: s\");\r\n            if (this.scene.getViewport().getY() + 100 >= worldHeight - this.scene.getViewport().getHeight()){\r\n                this.scene.getViewport().setPosition(this.scene.getViewport().getX(), worldHeight - this.scene.getViewport().getHeight());\r\n            }else{\r\n                this.scene.getViewport().inc(0, 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*public mouseEnterHandler = (event : MouseEvent) : void => {\r\n        console.log(\"mousePressX: \" + event.clientX);\r\n        console.log(\"mousePressY: \" + event.clientY);\r\n        let targetX = event.clientX; //+ this.dragOffsetX;\r\n        let targetY = event.clientY; //+ this.dragOffsetY;\r\n        \r\n        let diffX = targetX - this.scene.moveMantis().getPosition().getX();\r\n        let diffY = targetY - this.scene.moveMantis().getPosition().getY();\r\n        \r\n        if (Math.abs (diffX) >= 1) {\r\n            targetX += (diffX * 0.1);\t\r\n        }\r\n        \r\n        if (Math.abs (diffY) >= 1) {\r\n            targetY += (diffY * 0.1);\r\n        }\r\n\r\n        this.scene.moveMantis().getPosition().set(targetX, targetY,\r\n            this.spriteToDrag.getPosition().getZ(), \r\n            this.spriteToDrag.getPosition().getW());\r\n    }*/\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}